/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.bitconex.tmf.pm.server;

import de.bitconex.tmf.pm.model.Error;
import de.bitconex.tmf.pm.model.IndividualAttributeValueChangeEvent;
import de.bitconex.tmf.pm.model.IndividualCreateEvent;
import de.bitconex.tmf.pm.model.IndividualDeleteEvent;
import de.bitconex.tmf.pm.model.IndividualStateChangeEvent;
import de.bitconex.tmf.pm.model.OrganizationAttributeValueChangeEvent;
import de.bitconex.tmf.pm.model.OrganizationCreateEvent;
import de.bitconex.tmf.pm.model.OrganizationDeleteEvent;
import de.bitconex.tmf.pm.model.OrganizationStateChangeEvent;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;


@Validated
@Tag(name = "notification listener", description = "Notifications for Resource Lifecycle and event notifications")
public interface ListenerApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /listener/individualAttributeValueChangeEvent : Client listener for entity IndividualAttributeValueChangeEvent
     * Example of a client listener for receiving the notification IndividualAttributeValueChangeEvent
     *
     * @param individualAttributeValueChangeEvent Individual attributeValueChange Event payload (required)
     * @return Notified (status code 204)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "individualAttributeValueChangeEvent",
        summary = "Client listener for entity IndividualAttributeValueChangeEvent",
        description = "Example of a client listener for receiving the notification IndividualAttributeValueChangeEvent",
        tags = { "notification listener" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Notified"),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/individualAttributeValueChangeEvent",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> individualAttributeValueChangeEvent(
        @Parameter(name = "IndividualAttributeValueChangeEvent", description = "Individual attributeValueChange Event payload", required = true) @Valid @RequestBody IndividualAttributeValueChangeEvent individualAttributeValueChangeEvent
    );


    /**
     * POST /listener/individualCreateEvent : Client listener for entity IndividualCreateEvent
     * Example of a client listener for receiving the notification IndividualCreateEvent
     *
     * @param individualCreateEvent Individual create Event payload (required)
     * @return Notified (status code 204)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "individualCreateEvent",
        summary = "Client listener for entity IndividualCreateEvent",
        description = "Example of a client listener for receiving the notification IndividualCreateEvent",
        tags = { "notification listener" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Notified"),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/individualCreateEvent",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> individualCreateEvent(
        @Parameter(name = "IndividualCreateEvent", description = "Individual create Event payload", required = true) @Valid @RequestBody IndividualCreateEvent individualCreateEvent
    );


    /**
     * POST /listener/individualDeleteEvent : Client listener for entity IndividualDeleteEvent
     * Example of a client listener for receiving the notification IndividualDeleteEvent
     *
     * @param individualDeleteEvent Individual delete Event payload (required)
     * @return Notified (status code 204)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "individualDeleteEvent",
        summary = "Client listener for entity IndividualDeleteEvent",
        description = "Example of a client listener for receiving the notification IndividualDeleteEvent",
        tags = { "notification listener" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Notified"),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/individualDeleteEvent",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> individualDeleteEvent(
        @Parameter(name = "IndividualDeleteEvent", description = "Individual delete Event payload", required = true) @Valid @RequestBody IndividualDeleteEvent individualDeleteEvent
    );


    /**
     * POST /listener/individualStateChangeEvent : Client listener for entity IndividualStateChangeEvent
     * Example of a client listener for receiving the notification IndividualStateChangeEvent
     *
     * @param individualStateChangeEvent Individual stateChange Event payload (required)
     * @return Notified (status code 204)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "individualStateChangeEvent",
        summary = "Client listener for entity IndividualStateChangeEvent",
        description = "Example of a client listener for receiving the notification IndividualStateChangeEvent",
        tags = { "notification listener" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Notified"),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/individualStateChangeEvent",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> individualStateChangeEvent(
        @Parameter(name = "IndividualStateChangeEvent", description = "Individual stateChange Event payload", required = true) @Valid @RequestBody IndividualStateChangeEvent individualStateChangeEvent
    );


    /**
     * POST /listener/organizationAttributeValueChangeEvent : Client listener for entity OrganizationAttributeValueChangeEvent
     * Example of a client listener for receiving the notification OrganizationAttributeValueChangeEvent
     *
     * @param organizationAttributeValueChangeEvent Organization attributeValueChange Event payload (required)
     * @return Notified (status code 204)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "organizationAttributeValueChangeEvent",
        summary = "Client listener for entity OrganizationAttributeValueChangeEvent",
        description = "Example of a client listener for receiving the notification OrganizationAttributeValueChangeEvent",
        tags = { "notification listener" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Notified"),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/organizationAttributeValueChangeEvent",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> organizationAttributeValueChangeEvent(
        @Parameter(name = "OrganizationAttributeValueChangeEvent", description = "Organization attributeValueChange Event payload", required = true) @Valid @RequestBody OrganizationAttributeValueChangeEvent organizationAttributeValueChangeEvent
    );


    /**
     * POST /listener/organizationCreateEvent : Client listener for entity OrganizationCreateEvent
     * Example of a client listener for receiving the notification OrganizationCreateEvent
     *
     * @param organizationCreateEvent Organization create Event payload (required)
     * @return Notified (status code 204)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "organizationCreateEvent",
        summary = "Client listener for entity OrganizationCreateEvent",
        description = "Example of a client listener for receiving the notification OrganizationCreateEvent",
        tags = { "notification listener" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Notified"),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/organizationCreateEvent",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> organizationCreateEvent(
        @Parameter(name = "OrganizationCreateEvent", description = "Organization create Event payload", required = true) @Valid @RequestBody OrganizationCreateEvent organizationCreateEvent
    );


    /**
     * POST /listener/organizationDeleteEvent : Client listener for entity OrganizationDeleteEvent
     * Example of a client listener for receiving the notification OrganizationDeleteEvent
     *
     * @param organizationDeleteEvent Organization delete Event payload (required)
     * @return Notified (status code 204)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "organizationDeleteEvent",
        summary = "Client listener for entity OrganizationDeleteEvent",
        description = "Example of a client listener for receiving the notification OrganizationDeleteEvent",
        tags = { "notification listener" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Notified"),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/organizationDeleteEvent",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> organizationDeleteEvent(
        @Parameter(name = "OrganizationDeleteEvent", description = "Organization delete Event payload", required = true) @Valid @RequestBody OrganizationDeleteEvent organizationDeleteEvent
    );


    /**
     * POST /listener/organizationStateChangeEvent : Client listener for entity OrganizationStateChangeEvent
     * Example of a client listener for receiving the notification OrganizationStateChangeEvent
     *
     * @param organizationStateChangeEvent Organization stateChange Event payload (required)
     * @return Notified (status code 204)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "organizationStateChangeEvent",
        summary = "Client listener for entity OrganizationStateChangeEvent",
        description = "Example of a client listener for receiving the notification OrganizationStateChangeEvent",
        tags = { "notification listener" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Notified"),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/organizationStateChangeEvent",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> organizationStateChangeEvent(
        @Parameter(name = "OrganizationStateChangeEvent", description = "Organization stateChange Event payload", required = true) @Valid @RequestBody OrganizationStateChangeEvent organizationStateChangeEvent
    );

}
