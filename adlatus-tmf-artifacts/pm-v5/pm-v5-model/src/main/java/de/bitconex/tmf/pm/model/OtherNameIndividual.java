/*
 * Party Management
 * TMF API Reference : TMF 632 - Party  Release: 22.5 The party API provides standardized mechanism for party management such as creation, update, retrieval, deletion, and notification of events. Party can be an individual or an organization that has any kind of relation with the enterprise. Party is created to record individual or organization information before the assignment of any role. For example, within the context of a split billing mechanism, Party API allows creation of the individual or organization that will play the role of 3rd payer for a given offer and, then, allows consultation or update of his information. Resources - Party (abstract base class with concrete subclasses Individual and Organization) Party API performs the following operations: - Retrieve an organization or an individual - Retrieve a collection of organizations or individuals according to given criteria - Create a new organization or a new individual - Update an existing organization or an existing individual - Delete an existing organization or an existing individual - Notify events on organization or individual
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.bitconex.tmf.pm.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

        /**
* Keeps track of other names, for example the old name of a woman before marriage or an artist name.
*/
    @JsonPropertyOrder({
        OtherNameIndividual.JSON_PROPERTY_TITLE,
        OtherNameIndividual.JSON_PROPERTY_ARISTOCRATIC_TITLE,
        OtherNameIndividual.JSON_PROPERTY_GENERATION,
        OtherNameIndividual.JSON_PROPERTY_GIVEN_NAME,
        OtherNameIndividual.JSON_PROPERTY_PREFERRED_GIVEN_NAME,
        OtherNameIndividual.JSON_PROPERTY_FAMILY_NAME_PREFIX,
        OtherNameIndividual.JSON_PROPERTY_FAMILY_NAME,
        OtherNameIndividual.JSON_PROPERTY_LEGAL_NAME,
        OtherNameIndividual.JSON_PROPERTY_MIDDLE_NAME,
        OtherNameIndividual.JSON_PROPERTY_FULL_NAME,
        OtherNameIndividual.JSON_PROPERTY_FORMATTED_NAME,
        OtherNameIndividual.JSON_PROPERTY_VALID_FOR
    })
@lombok.Data
@lombok.Builder
@lombok.AllArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)

public class OtherNameIndividual {
        public static final String JSON_PROPERTY_TITLE = "title";
            private String title;

        public static final String JSON_PROPERTY_ARISTOCRATIC_TITLE = "aristocraticTitle";
            private String aristocraticTitle;

        public static final String JSON_PROPERTY_GENERATION = "generation";
            private String generation;

        public static final String JSON_PROPERTY_GIVEN_NAME = "givenName";
            private String givenName;

        public static final String JSON_PROPERTY_PREFERRED_GIVEN_NAME = "preferredGivenName";
            private String preferredGivenName;

        public static final String JSON_PROPERTY_FAMILY_NAME_PREFIX = "familyNamePrefix";
            private String familyNamePrefix;

        public static final String JSON_PROPERTY_FAMILY_NAME = "familyName";
            private String familyName;

        public static final String JSON_PROPERTY_LEGAL_NAME = "legalName";
            private String legalName;

        public static final String JSON_PROPERTY_MIDDLE_NAME = "middleName";
            private String middleName;

        public static final String JSON_PROPERTY_FULL_NAME = "fullName";
            private String fullName;

        public static final String JSON_PROPERTY_FORMATTED_NAME = "formattedName";
            private String formattedName;

        public static final String JSON_PROPERTY_VALID_FOR = "validFor";
            private TimePeriod validFor;



}

