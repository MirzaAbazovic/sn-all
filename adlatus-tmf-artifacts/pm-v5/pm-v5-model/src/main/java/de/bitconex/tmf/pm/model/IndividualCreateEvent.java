/*
 * Party Management
 * TMF API Reference : TMF 632 - Party  Release: 22.5 The party API provides standardized mechanism for party management such as creation, update, retrieval, deletion, and notification of events. Party can be an individual or an organization that has any kind of relation with the enterprise. Party is created to record individual or organization information before the assignment of any role. For example, within the context of a split billing mechanism, Party API allows creation of the individual or organization that will play the role of 3rd payer for a given offer and, then, allows consultation or update of his information. Resources - Party (abstract base class with concrete subclasses Individual and Organization) Party API performs the following operations: - Retrieve an organization or an individual - Retrieve a collection of organizations or individuals according to given criteria - Create a new organization or a new individual - Update an existing organization or an existing individual - Delete an existing organization or an existing individual - Notify events on organization or individual
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.bitconex.tmf.pm.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeInfo;

import java.time.OffsetDateTime;
import java.util.List;

        /**
* IndividualCreateEvent
*/
    @JsonPropertyOrder({
        IndividualCreateEvent.JSON_PROPERTY_AT_TYPE,
        IndividualCreateEvent.JSON_PROPERTY_AT_BASE_TYPE,
        IndividualCreateEvent.JSON_PROPERTY_AT_SCHEMA_LOCATION,
        IndividualCreateEvent.JSON_PROPERTY_HREF,
        IndividualCreateEvent.JSON_PROPERTY_ID,
        IndividualCreateEvent.JSON_PROPERTY_CORRELATION_ID,
        IndividualCreateEvent.JSON_PROPERTY_DOMAIN,
        IndividualCreateEvent.JSON_PROPERTY_TITLE,
        IndividualCreateEvent.JSON_PROPERTY_DESCRIPTION,
        IndividualCreateEvent.JSON_PROPERTY_PRIORITY,
        IndividualCreateEvent.JSON_PROPERTY_TIME_OCCURRED,
        IndividualCreateEvent.JSON_PROPERTY_SOURCE,
        IndividualCreateEvent.JSON_PROPERTY_REPORTING_SYSTEM,
        IndividualCreateEvent.JSON_PROPERTY_RELATED_PARTY,
        IndividualCreateEvent.JSON_PROPERTY_ANALYTIC_CHARACTERISTIC,
        IndividualCreateEvent.JSON_PROPERTY_EVENT_ID,
        IndividualCreateEvent.JSON_PROPERTY_EVENT_TIME,
        IndividualCreateEvent.JSON_PROPERTY_EVENT_TYPE,
        IndividualCreateEvent.JSON_PROPERTY_EVENT
    })
@lombok.Data
@lombok.Builder
@lombok.AllArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)

@JsonIgnoreProperties(
  value = "@type", // ignore manually set @type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the @type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@type", visible = true)

public class IndividualCreateEvent {
        public static final String JSON_PROPERTY_AT_TYPE = "@type";
            protected String atType;

        public static final String JSON_PROPERTY_AT_BASE_TYPE = "@baseType";
            private String atBaseType;

        public static final String JSON_PROPERTY_AT_SCHEMA_LOCATION = "@schemaLocation";
            private String atSchemaLocation;

        public static final String JSON_PROPERTY_HREF = "href";
            private String href;

        public static final String JSON_PROPERTY_ID = "id";
            private String id;

        public static final String JSON_PROPERTY_CORRELATION_ID = "correlationId";
            private String correlationId;

        public static final String JSON_PROPERTY_DOMAIN = "domain";
            private String domain;

        public static final String JSON_PROPERTY_TITLE = "title";
            private String title;

        public static final String JSON_PROPERTY_DESCRIPTION = "description";
            private String description;

        public static final String JSON_PROPERTY_PRIORITY = "priority";
            private String priority;

        public static final String JSON_PROPERTY_TIME_OCCURRED = "timeOccurred";
            private OffsetDateTime timeOccurred;

        public static final String JSON_PROPERTY_SOURCE = "source";
            private EntityRef source;

        public static final String JSON_PROPERTY_REPORTING_SYSTEM = "reportingSystem";
            private EntityRef reportingSystem;

        public static final String JSON_PROPERTY_RELATED_PARTY = "relatedParty";
            private List<RelatedPartyRefOrPartyRoleRef> relatedParty;

        public static final String JSON_PROPERTY_ANALYTIC_CHARACTERISTIC = "analyticCharacteristic";
            private List<Characteristic> analyticCharacteristic;

        public static final String JSON_PROPERTY_EVENT_ID = "eventId";
            private String eventId;

        public static final String JSON_PROPERTY_EVENT_TIME = "eventTime";
            private OffsetDateTime eventTime;

        public static final String JSON_PROPERTY_EVENT_TYPE = "eventType";
            private String eventType;

        public static final String JSON_PROPERTY_EVENT = "event";
            private IndividualCreateEventPayload event;



}

