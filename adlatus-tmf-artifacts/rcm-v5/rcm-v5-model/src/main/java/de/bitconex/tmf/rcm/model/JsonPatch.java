/*
 * Resource Catalog Management
 * ### February 2023 Resource Catalog API is one of Catalog Management API Family. Resource Catalog API goal is to provide a catalog of resources.  ### Operations Resource Catalog API performs the following operations on the resources : - Retrieve an entity or a collection of entities depending on filter criteria - Partial update of an entity (including updating rules) - Create an entity (including default values and creation rules) - Delete an entity - Manage notification of events
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.bitconex.tmf.rcm.model;

import java.util.Objects;
import java.util.Arrays;
    import com.fasterxml.jackson.annotation.JsonInclude;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import com.fasterxml.jackson.annotation.JsonCreator;
    import com.fasterxml.jackson.annotation.JsonTypeName;
    import com.fasterxml.jackson.annotation.JsonValue;
    import org.openapitools.jackson.nullable.JsonNullable;
    import com.fasterxml.jackson.annotation.JsonIgnore;
    import org.openapitools.jackson.nullable.JsonNullable;
    import java.util.NoSuchElementException;
    import com.fasterxml.jackson.annotation.*;

        /**
* A JSONPatch document as defined by RFC 6902
*/
    @JsonPropertyOrder({
        JsonPatch.JSON_PROPERTY_OP,
        JsonPatch.JSON_PROPERTY_PATH,
        JsonPatch.JSON_PROPERTY_VALUE,
        JsonPatch.JSON_PROPERTY_FROM
    })
@lombok.Data
@lombok.Builder
@lombok.AllArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)

public class JsonPatch {
              /**
   * The operation to be performed
   */
  public enum OpEnum {
    ADD("add"),
    
    REMOVE("remove"),
    
    REPLACE("replace"),
    
    MOVE("move"),
    
    COPY("copy"),
    
    TEST("test");

    private String value;

    OpEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static OpEnum fromValue(String value) {
      for (OpEnum b : OpEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

        public static final String JSON_PROPERTY_OP = "op";
            private OpEnum op;

        public static final String JSON_PROPERTY_PATH = "path";
            private String path;

        public static final String JSON_PROPERTY_VALUE = "value";
            private JsonNullable<Object> value = JsonNullable.<Object>of(null);

        public static final String JSON_PROPERTY_FROM = "from";
            private String from;



}

