/*
 * Resource Catalog Management
 * ### February 2023 Resource Catalog API is one of Catalog Management API Family. Resource Catalog API goal is to provide a catalog of resources.  ### Operations Resource Catalog API performs the following operations on the resources : - Retrieve an entity or a collection of entities depending on filter criteria - Partial update of an entity (including updating rules) - Create an entity (including default values and creation rules) - Delete an entity - Manage notification of events
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.bitconex.tmf.rcm.model;

import java.util.Objects;
import java.util.Arrays;
    import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
    import com.fasterxml.jackson.annotation.JsonInclude;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import com.fasterxml.jackson.annotation.JsonCreator;
    import com.fasterxml.jackson.annotation.JsonSubTypes;
    import com.fasterxml.jackson.annotation.JsonTypeInfo;
    import com.fasterxml.jackson.annotation.JsonTypeName;
    import com.fasterxml.jackson.annotation.JsonValue;
    import de.bitconex.tmf.rcm.model.AttachmentRefOrValue;
    import de.bitconex.tmf.rcm.model.CharacteristicSpecification;
    import de.bitconex.tmf.rcm.model.ConnectionPointSpecificationRef;
    import de.bitconex.tmf.rcm.model.ExternalIdentifier;
    import de.bitconex.tmf.rcm.model.FeatureSpecification;
    import de.bitconex.tmf.rcm.model.IntentSpecificationRef;
    import de.bitconex.tmf.rcm.model.LogicalResourceSpecification;
    import de.bitconex.tmf.rcm.model.RelatedPartyRefOrPartyRoleRef;
    import de.bitconex.tmf.rcm.model.ResourceGraphSpecification;
    import de.bitconex.tmf.rcm.model.ResourceSpecificationRelationship;
    import de.bitconex.tmf.rcm.model.TargetResourceSchema;
    import de.bitconex.tmf.rcm.model.TimePeriod;
    import java.time.OffsetDateTime;
    import java.util.ArrayList;
    import java.util.List;
    import com.fasterxml.jackson.annotation.*;

        /**
* ResourceFunctionSpecification
*/
    @JsonPropertyOrder({
        ResourceFunctionSpecification.JSON_PROPERTY_CONNECTION_POINT_SPECIFICATION,
        ResourceFunctionSpecification.JSON_PROPERTY_CONNECTIVITY_SPECIFICATION
    })
@lombok.Data
@lombok.AllArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)

@JsonIgnoreProperties(
  value = "@type", // ignore manually set @type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the @type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@type", visible = true)

public class ResourceFunctionSpecification extends LogicalResourceSpecification {
        public static final String JSON_PROPERTY_CONNECTION_POINT_SPECIFICATION = "connectionPointSpecification";
            private List<ConnectionPointSpecificationRef> connectionPointSpecification;

        public static final String JSON_PROPERTY_CONNECTIVITY_SPECIFICATION = "connectivitySpecification";
            private List<ResourceGraphSpecification> connectivitySpecification;



}

