/*
 * Resource Catalog Management
 * ### February 2023 Resource Catalog API is one of Catalog Management API Family. Resource Catalog API goal is to provide a catalog of resources.  ### Operations Resource Catalog API performs the following operations on the resources : - Retrieve an entity or a collection of entities depending on filter criteria - Partial update of an entity (including updating rules) - Create an entity (including default values and creation rules) - Delete an entity - Manage notification of events
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.bitconex.tmf.rcm.model;

import java.util.Objects;
import java.util.Arrays;
    import com.fasterxml.jackson.annotation.JsonInclude;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import com.fasterxml.jackson.annotation.JsonCreator;
    import com.fasterxml.jackson.annotation.JsonTypeName;
    import com.fasterxml.jackson.annotation.JsonValue;
    import de.bitconex.tmf.rcm.model.TimePeriod;
    import java.net.URI;
    import com.fasterxml.jackson.annotation.*;

        /**
* Relationship between feature specifications
*/
    @JsonPropertyOrder({
        FeatureSpecificationRelationshipFVOAllOf.JSON_PROPERTY_RELATIONSHIP_TYPE,
        FeatureSpecificationRelationshipFVOAllOf.JSON_PROPERTY_FEATURE_ID,
        FeatureSpecificationRelationshipFVOAllOf.JSON_PROPERTY_PARENT_SPECIFICATION_ID,
        FeatureSpecificationRelationshipFVOAllOf.JSON_PROPERTY_PARENT_SPECIFICATION_HREF,
        FeatureSpecificationRelationshipFVOAllOf.JSON_PROPERTY_NAME,
        FeatureSpecificationRelationshipFVOAllOf.JSON_PROPERTY_VALID_FOR
    })
            @JsonTypeName("FeatureSpecificationRelationship_FVO_allOf")
@lombok.Data
@lombok.Builder
@lombok.AllArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)

public class FeatureSpecificationRelationshipFVOAllOf {
              /**
   * This is the type of the feature specification relationship.
   */
  public enum RelationshipTypeEnum {
    EXCLUDED("excluded"),
    
    INCLUDES("includes"),
    
    MAY_INCLUDE("may include"),
    
    REQUIRES("requires");

    private String value;

    RelationshipTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static RelationshipTypeEnum fromValue(String value) {
      for (RelationshipTypeEnum b : RelationshipTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

        public static final String JSON_PROPERTY_RELATIONSHIP_TYPE = "relationshipType";
            private RelationshipTypeEnum relationshipType;

        public static final String JSON_PROPERTY_FEATURE_ID = "featureId";
            private String featureId;

        public static final String JSON_PROPERTY_PARENT_SPECIFICATION_ID = "parentSpecificationId";
            private String parentSpecificationId;

        public static final String JSON_PROPERTY_PARENT_SPECIFICATION_HREF = "parentSpecificationHref";
            private URI parentSpecificationHref;

        public static final String JSON_PROPERTY_NAME = "name";
            private String name;

        public static final String JSON_PROPERTY_VALID_FOR = "validFor";
            private TimePeriod validFor;



}

