/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.bitconex.tmf.rcm.server;

import de.bitconex.tmf.rcm.model.Error;
import de.bitconex.tmf.rcm.model.*;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.Optional;


@Validated
@Tag(name = "notification listener", description = "Notifications for Resource Lifecycle and event notifications")
public interface ListenerApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /listener/exportJobCreateEvent : Client listener for entity ExportJobCreateEvent
     * Example of a client listener for receiving the notification ExportJobCreateEvent
     *
     * @param exportJobCreateEvent ExportJob create Event payload (required)
     * @return Notified (status code 204)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "exportJobCreateEvent",
        summary = "Client listener for entity ExportJobCreateEvent",
        description = "Example of a client listener for receiving the notification ExportJobCreateEvent",
        tags = { "notification listener" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Notified"),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/exportJobCreateEvent",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> exportJobCreateEvent(
        @Parameter(name = "ExportJobCreateEvent", description = "ExportJob create Event payload", required = true) @Valid @RequestBody ExportJobCreateEvent exportJobCreateEvent
    );


    /**
     * POST /listener/exportJobDeleteEvent : Client listener for entity ExportJobDeleteEvent
     * Example of a client listener for receiving the notification ExportJobDeleteEvent
     *
     * @param exportJobDeleteEvent ExportJob delete Event payload (required)
     * @return Notified (status code 204)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "exportJobDeleteEvent",
        summary = "Client listener for entity ExportJobDeleteEvent",
        description = "Example of a client listener for receiving the notification ExportJobDeleteEvent",
        tags = { "notification listener" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Notified"),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/exportJobDeleteEvent",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> exportJobDeleteEvent(
        @Parameter(name = "ExportJobDeleteEvent", description = "ExportJob delete Event payload", required = true) @Valid @RequestBody ExportJobDeleteEvent exportJobDeleteEvent
    );


    /**
     * POST /listener/exportJobStateChangeEvent : Client listener for entity ExportJobStateChangeEvent
     * Example of a client listener for receiving the notification ExportJobStateChangeEvent
     *
     * @param exportJobStateChangeEvent ExportJob stateChange Event payload (required)
     * @return Notified (status code 204)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "exportJobStateChangeEvent",
        summary = "Client listener for entity ExportJobStateChangeEvent",
        description = "Example of a client listener for receiving the notification ExportJobStateChangeEvent",
        tags = { "notification listener" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Notified"),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/exportJobStateChangeEvent",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> exportJobStateChangeEvent(
        @Parameter(name = "ExportJobStateChangeEvent", description = "ExportJob stateChange Event payload", required = true) @Valid @RequestBody ExportJobStateChangeEvent exportJobStateChangeEvent
    );


    /**
     * POST /listener/importJobCreateEvent : Client listener for entity ImportJobCreateEvent
     * Example of a client listener for receiving the notification ImportJobCreateEvent
     *
     * @param importJobCreateEvent ImportJob create Event payload (required)
     * @return Notified (status code 204)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "importJobCreateEvent",
        summary = "Client listener for entity ImportJobCreateEvent",
        description = "Example of a client listener for receiving the notification ImportJobCreateEvent",
        tags = { "notification listener" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Notified"),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/importJobCreateEvent",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> importJobCreateEvent(
        @Parameter(name = "ImportJobCreateEvent", description = "ImportJob create Event payload", required = true) @Valid @RequestBody ImportJobCreateEvent importJobCreateEvent
    );


    /**
     * POST /listener/importJobDeleteEvent : Client listener for entity ImportJobDeleteEvent
     * Example of a client listener for receiving the notification ImportJobDeleteEvent
     *
     * @param importJobDeleteEvent ImportJob delete Event payload (required)
     * @return Notified (status code 204)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "importJobDeleteEvent",
        summary = "Client listener for entity ImportJobDeleteEvent",
        description = "Example of a client listener for receiving the notification ImportJobDeleteEvent",
        tags = { "notification listener" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Notified"),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/importJobDeleteEvent",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> importJobDeleteEvent(
        @Parameter(name = "ImportJobDeleteEvent", description = "ImportJob delete Event payload", required = true) @Valid @RequestBody ImportJobDeleteEvent importJobDeleteEvent
    );


    /**
     * POST /listener/importJobStateChangeEvent : Client listener for entity ImportJobStateChangeEvent
     * Example of a client listener for receiving the notification ImportJobStateChangeEvent
     *
     * @param importJobStateChangeEvent ImportJob stateChange Event payload (required)
     * @return Notified (status code 204)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "importJobStateChangeEvent",
        summary = "Client listener for entity ImportJobStateChangeEvent",
        description = "Example of a client listener for receiving the notification ImportJobStateChangeEvent",
        tags = { "notification listener" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Notified"),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/importJobStateChangeEvent",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> importJobStateChangeEvent(
        @Parameter(name = "ImportJobStateChangeEvent", description = "ImportJob stateChange Event payload", required = true) @Valid @RequestBody ImportJobStateChangeEvent importJobStateChangeEvent
    );


    /**
     * POST /listener/resourceCandidateAttributeValueChangeEvent : Client listener for entity ResourceCandidateAttributeValueChangeEvent
     * Example of a client listener for receiving the notification ResourceCandidateAttributeValueChangeEvent
     *
     * @param resourceCandidateAttributeValueChangeEvent ResourceCandidate attributeValueChange Event payload (required)
     * @return Notified (status code 204)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "resourceCandidateAttributeValueChangeEvent",
        summary = "Client listener for entity ResourceCandidateAttributeValueChangeEvent",
        description = "Example of a client listener for receiving the notification ResourceCandidateAttributeValueChangeEvent",
        tags = { "notification listener" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Notified"),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/resourceCandidateAttributeValueChangeEvent",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> resourceCandidateAttributeValueChangeEvent(
        @Parameter(name = "ResourceCandidateAttributeValueChangeEvent", description = "ResourceCandidate attributeValueChange Event payload", required = true) @Valid @RequestBody ResourceCandidateAttributeValueChangeEvent resourceCandidateAttributeValueChangeEvent
    );


    /**
     * POST /listener/resourceCandidateCreateEvent : Client listener for entity ResourceCandidateCreateEvent
     * Example of a client listener for receiving the notification ResourceCandidateCreateEvent
     *
     * @param resourceCandidateCreateEvent ResourceCandidate create Event payload (required)
     * @return Notified (status code 204)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "resourceCandidateCreateEvent",
        summary = "Client listener for entity ResourceCandidateCreateEvent",
        description = "Example of a client listener for receiving the notification ResourceCandidateCreateEvent",
        tags = { "notification listener" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Notified"),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/resourceCandidateCreateEvent",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> resourceCandidateCreateEvent(
        @Parameter(name = "ResourceCandidateCreateEvent", description = "ResourceCandidate create Event payload", required = true) @Valid @RequestBody ResourceCandidateCreateEvent resourceCandidateCreateEvent
    );


    /**
     * POST /listener/resourceCandidateDeleteEvent : Client listener for entity ResourceCandidateDeleteEvent
     * Example of a client listener for receiving the notification ResourceCandidateDeleteEvent
     *
     * @param resourceCandidateDeleteEvent ResourceCandidate delete Event payload (required)
     * @return Notified (status code 204)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "resourceCandidateDeleteEvent",
        summary = "Client listener for entity ResourceCandidateDeleteEvent",
        description = "Example of a client listener for receiving the notification ResourceCandidateDeleteEvent",
        tags = { "notification listener" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Notified"),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/resourceCandidateDeleteEvent",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> resourceCandidateDeleteEvent(
        @Parameter(name = "ResourceCandidateDeleteEvent", description = "ResourceCandidate delete Event payload", required = true) @Valid @RequestBody ResourceCandidateDeleteEvent resourceCandidateDeleteEvent
    );


    /**
     * POST /listener/resourceCandidateStatusChangeEvent : Client listener for entity ResourceCandidateStatusChangeEvent
     * Example of a client listener for receiving the notification ResourceCandidateStatusChangeEvent
     *
     * @param resourceCandidateStatusChangeEvent ResourceCandidate statusChange Event payload (required)
     * @return Notified (status code 204)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "resourceCandidateStatusChangeEvent",
        summary = "Client listener for entity ResourceCandidateStatusChangeEvent",
        description = "Example of a client listener for receiving the notification ResourceCandidateStatusChangeEvent",
        tags = { "notification listener" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Notified"),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/resourceCandidateStatusChangeEvent",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> resourceCandidateStatusChangeEvent(
        @Parameter(name = "ResourceCandidateStatusChangeEvent", description = "ResourceCandidate statusChange Event payload", required = true) @Valid @RequestBody ResourceCandidateStatusChangeEvent resourceCandidateStatusChangeEvent
    );


    /**
     * POST /listener/resourceCatalogAttributeValueChangeEvent : Client listener for entity ResourceCatalogAttributeValueChangeEvent
     * Example of a client listener for receiving the notification ResourceCatalogAttributeValueChangeEvent
     *
     * @param resourceCatalogAttributeValueChangeEvent ResourceCatalog attributeValueChange Event payload (required)
     * @return Notified (status code 204)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "resourceCatalogAttributeValueChangeEvent",
        summary = "Client listener for entity ResourceCatalogAttributeValueChangeEvent",
        description = "Example of a client listener for receiving the notification ResourceCatalogAttributeValueChangeEvent",
        tags = { "notification listener" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Notified"),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/resourceCatalogAttributeValueChangeEvent",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> resourceCatalogAttributeValueChangeEvent(
        @Parameter(name = "ResourceCatalogAttributeValueChangeEvent", description = "ResourceCatalog attributeValueChange Event payload", required = true) @Valid @RequestBody ResourceCatalogAttributeValueChangeEvent resourceCatalogAttributeValueChangeEvent
    );


    /**
     * POST /listener/resourceCatalogCreateEvent : Client listener for entity ResourceCatalogCreateEvent
     * Example of a client listener for receiving the notification ResourceCatalogCreateEvent
     *
     * @param resourceCatalogCreateEvent ResourceCatalog create Event payload (required)
     * @return Notified (status code 204)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "resourceCatalogCreateEvent",
        summary = "Client listener for entity ResourceCatalogCreateEvent",
        description = "Example of a client listener for receiving the notification ResourceCatalogCreateEvent",
        tags = { "notification listener" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Notified"),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/resourceCatalogCreateEvent",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> resourceCatalogCreateEvent(
        @Parameter(name = "ResourceCatalogCreateEvent", description = "ResourceCatalog create Event payload", required = true) @Valid @RequestBody ResourceCatalogCreateEvent resourceCatalogCreateEvent
    );


    /**
     * POST /listener/resourceCatalogDeleteEvent : Client listener for entity ResourceCatalogDeleteEvent
     * Example of a client listener for receiving the notification ResourceCatalogDeleteEvent
     *
     * @param resourceCatalogDeleteEvent ResourceCatalog delete Event payload (required)
     * @return Notified (status code 204)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "resourceCatalogDeleteEvent",
        summary = "Client listener for entity ResourceCatalogDeleteEvent",
        description = "Example of a client listener for receiving the notification ResourceCatalogDeleteEvent",
        tags = { "notification listener" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Notified"),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/resourceCatalogDeleteEvent",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> resourceCatalogDeleteEvent(
        @Parameter(name = "ResourceCatalogDeleteEvent", description = "ResourceCatalog delete Event payload", required = true) @Valid @RequestBody ResourceCatalogDeleteEvent resourceCatalogDeleteEvent
    );


    /**
     * POST /listener/resourceCatalogStatusChangeEvent : Client listener for entity ResourceCatalogStatusChangeEvent
     * Example of a client listener for receiving the notification ResourceCatalogStatusChangeEvent
     *
     * @param resourceCatalogStatusChangeEvent ResourceCatalog statusChange Event payload (required)
     * @return Notified (status code 204)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "resourceCatalogStatusChangeEvent",
        summary = "Client listener for entity ResourceCatalogStatusChangeEvent",
        description = "Example of a client listener for receiving the notification ResourceCatalogStatusChangeEvent",
        tags = { "notification listener" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Notified"),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/resourceCatalogStatusChangeEvent",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> resourceCatalogStatusChangeEvent(
        @Parameter(name = "ResourceCatalogStatusChangeEvent", description = "ResourceCatalog statusChange Event payload", required = true) @Valid @RequestBody ResourceCatalogStatusChangeEvent resourceCatalogStatusChangeEvent
    );


    /**
     * POST /listener/resourceCategoryAttributeValueChangeEvent : Client listener for entity ResourceCategoryAttributeValueChangeEvent
     * Example of a client listener for receiving the notification ResourceCategoryAttributeValueChangeEvent
     *
     * @param resourceCategoryAttributeValueChangeEvent ResourceCategory attributeValueChange Event payload (required)
     * @return Notified (status code 204)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "resourceCategoryAttributeValueChangeEvent",
        summary = "Client listener for entity ResourceCategoryAttributeValueChangeEvent",
        description = "Example of a client listener for receiving the notification ResourceCategoryAttributeValueChangeEvent",
        tags = { "notification listener" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Notified"),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/resourceCategoryAttributeValueChangeEvent",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> resourceCategoryAttributeValueChangeEvent(
        @Parameter(name = "ResourceCategoryAttributeValueChangeEvent", description = "ResourceCategory attributeValueChange Event payload", required = true) @Valid @RequestBody ResourceCategoryAttributeValueChangeEvent resourceCategoryAttributeValueChangeEvent
    );


    /**
     * POST /listener/resourceCategoryCreateEvent : Client listener for entity ResourceCategoryCreateEvent
     * Example of a client listener for receiving the notification ResourceCategoryCreateEvent
     *
     * @param resourceCategoryCreateEvent ResourceCategory create Event payload (required)
     * @return Notified (status code 204)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "resourceCategoryCreateEvent",
        summary = "Client listener for entity ResourceCategoryCreateEvent",
        description = "Example of a client listener for receiving the notification ResourceCategoryCreateEvent",
        tags = { "notification listener" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Notified"),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/resourceCategoryCreateEvent",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> resourceCategoryCreateEvent(
        @Parameter(name = "ResourceCategoryCreateEvent", description = "ResourceCategory create Event payload", required = true) @Valid @RequestBody ResourceCategoryCreateEvent resourceCategoryCreateEvent
    );


    /**
     * POST /listener/resourceCategoryDeleteEvent : Client listener for entity ResourceCategoryDeleteEvent
     * Example of a client listener for receiving the notification ResourceCategoryDeleteEvent
     *
     * @param resourceCategoryDeleteEvent ResourceCategory delete Event payload (required)
     * @return Notified (status code 204)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "resourceCategoryDeleteEvent",
        summary = "Client listener for entity ResourceCategoryDeleteEvent",
        description = "Example of a client listener for receiving the notification ResourceCategoryDeleteEvent",
        tags = { "notification listener" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Notified"),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/resourceCategoryDeleteEvent",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> resourceCategoryDeleteEvent(
        @Parameter(name = "ResourceCategoryDeleteEvent", description = "ResourceCategory delete Event payload", required = true) @Valid @RequestBody ResourceCategoryDeleteEvent resourceCategoryDeleteEvent
    );


    /**
     * POST /listener/resourceCategoryStatusChangeEvent : Client listener for entity ResourceCategoryStatusChangeEvent
     * Example of a client listener for receiving the notification ResourceCategoryStatusChangeEvent
     *
     * @param resourceCategoryStatusChangeEvent ResourceCategory statusChange Event payload (required)
     * @return Notified (status code 204)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "resourceCategoryStatusChangeEvent",
        summary = "Client listener for entity ResourceCategoryStatusChangeEvent",
        description = "Example of a client listener for receiving the notification ResourceCategoryStatusChangeEvent",
        tags = { "notification listener" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Notified"),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/resourceCategoryStatusChangeEvent",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> resourceCategoryStatusChangeEvent(
        @Parameter(name = "ResourceCategoryStatusChangeEvent", description = "ResourceCategory statusChange Event payload", required = true) @Valid @RequestBody ResourceCategoryStatusChangeEvent resourceCategoryStatusChangeEvent
    );


    /**
     * POST /listener/resourceSpecificationAttributeValueChangeEvent : Client listener for entity ResourceSpecificationAttributeValueChangeEvent
     * Example of a client listener for receiving the notification ResourceSpecificationAttributeValueChangeEvent
     *
     * @param resourceSpecificationAttributeValueChangeEvent ResourceSpecification attributeValueChange Event payload (required)
     * @return Notified (status code 204)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "resourceSpecificationAttributeValueChangeEvent",
        summary = "Client listener for entity ResourceSpecificationAttributeValueChangeEvent",
        description = "Example of a client listener for receiving the notification ResourceSpecificationAttributeValueChangeEvent",
        tags = { "notification listener" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Notified"),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/resourceSpecificationAttributeValueChangeEvent",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> resourceSpecificationAttributeValueChangeEvent(
        @Parameter(name = "ResourceSpecificationAttributeValueChangeEvent", description = "ResourceSpecification attributeValueChange Event payload", required = true) @Valid @RequestBody ResourceSpecificationAttributeValueChangeEvent resourceSpecificationAttributeValueChangeEvent
    );


    /**
     * POST /listener/resourceSpecificationCreateEvent : Client listener for entity ResourceSpecificationCreateEvent
     * Example of a client listener for receiving the notification ResourceSpecificationCreateEvent
     *
     * @param resourceSpecificationCreateEvent ResourceSpecification create Event payload (required)
     * @return Notified (status code 204)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "resourceSpecificationCreateEvent",
        summary = "Client listener for entity ResourceSpecificationCreateEvent",
        description = "Example of a client listener for receiving the notification ResourceSpecificationCreateEvent",
        tags = { "notification listener" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Notified"),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/resourceSpecificationCreateEvent",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> resourceSpecificationCreateEvent(
        @Parameter(name = "ResourceSpecificationCreateEvent", description = "ResourceSpecification create Event payload", required = true) @Valid @RequestBody ResourceSpecificationCreateEvent resourceSpecificationCreateEvent
    );


    /**
     * POST /listener/resourceSpecificationDeleteEvent : Client listener for entity ResourceSpecificationDeleteEvent
     * Example of a client listener for receiving the notification ResourceSpecificationDeleteEvent
     *
     * @param resourceSpecificationDeleteEvent ResourceSpecification delete Event payload (required)
     * @return Notified (status code 204)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "resourceSpecificationDeleteEvent",
        summary = "Client listener for entity ResourceSpecificationDeleteEvent",
        description = "Example of a client listener for receiving the notification ResourceSpecificationDeleteEvent",
        tags = { "notification listener" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Notified"),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/resourceSpecificationDeleteEvent",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> resourceSpecificationDeleteEvent(
        @Parameter(name = "ResourceSpecificationDeleteEvent", description = "ResourceSpecification delete Event payload", required = true) @Valid @RequestBody ResourceSpecificationDeleteEvent resourceSpecificationDeleteEvent
    );


    /**
     * POST /listener/resourceSpecificationStatusChangeEvent : Client listener for entity ResourceSpecificationStatusChangeEvent
     * Example of a client listener for receiving the notification ResourceSpecificationStatusChangeEvent
     *
     * @param resourceSpecificationStatusChangeEvent ResourceSpecification statusChange Event payload (required)
     * @return Notified (status code 204)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "resourceSpecificationStatusChangeEvent",
        summary = "Client listener for entity ResourceSpecificationStatusChangeEvent",
        description = "Example of a client listener for receiving the notification ResourceSpecificationStatusChangeEvent",
        tags = { "notification listener" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Notified"),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/resourceSpecificationStatusChangeEvent",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> resourceSpecificationStatusChangeEvent(
        @Parameter(name = "ResourceSpecificationStatusChangeEvent", description = "ResourceSpecification statusChange Event payload", required = true) @Valid @RequestBody ResourceSpecificationStatusChangeEvent resourceSpecificationStatusChangeEvent
    );

}
