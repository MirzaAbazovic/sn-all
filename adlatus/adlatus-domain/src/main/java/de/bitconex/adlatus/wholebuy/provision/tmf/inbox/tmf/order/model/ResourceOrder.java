package de.bitconex.adlatus.wholebuy.provision.tmf.inbox.tmf.order.model;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;


@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
@Entity
public class ResourceOrder {
    /* This entity does not extend TMFBaseEntity because its id needs to be manually set
     and not generated by hibernate */
    @Id
    @NotNull
    private String id;
    private String href;
    @JsonProperty("@baseType")
    private String atBaseType;
    @JsonProperty("@schemaLocation")
    private String atSchemaLocation;
    @JsonProperty("@type")
    private String atType;

    private String category;
    private OffsetDateTime completionDate;
    private String description;
    private OffsetDateTime expectedCompletionDate;
    private String externalId;
    private String name;
    private OffsetDateTime orderDate;
    private String orderType;
    private Integer priority;
    private OffsetDateTime requestedCompletionDate;
    private OffsetDateTime requestedStartDate;
    private OffsetDateTime startDate;

    @Convert(converter = ResourceOrderStateConverter.class)
    private ResourceOrderState state;

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, orphanRemoval = true)
    @JsonBackReference
    @JoinColumn(name = "resource_order_id")
    private List<ResourceOrderItem> resourceOrderItems;

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, orphanRemoval = true)
    @JsonBackReference
    @JoinColumn(name = "resource_order_id")
    private List<RelatedParty> relatedParties;

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, orphanRemoval = true)
    @JsonBackReference
    @JoinColumn(name = "resource_order_id")
    private List<Note> notes;

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, orphanRemoval = true)
    @JoinColumn(name = "resource_order_id")
    @JsonBackReference
    private List<ExternalReference> externalReferences;

    public void addResourceOrderItem(ResourceOrderItem item) {
        if (this.resourceOrderItems == null)
            this.resourceOrderItems = new ArrayList<>();
        this.resourceOrderItems.add(item);
    }

    public void addRelatedParty(RelatedParty relatedParty) {
        if (this.relatedParties == null)
            this.relatedParties = new ArrayList<>();
        this.relatedParties.add(relatedParty);
    }

    public void addNote(Note note) {
        if (this.notes == null)
            this.notes = new ArrayList<>();
        this.notes.add(note);
    }

    public void addExternalReference(ExternalReference externalReference) {
        if (this.externalReferences == null)
            this.externalReferences = new ArrayList<>();
        this.externalReferences.add(externalReference);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof TmfBaseEntity that)) return false;
        return Objects.equals(getId(), that.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }


    public enum ResourceOrderState  {
        ACKNOWLEDGED("acknowledged"),
        REJECTED("rejected"),
        PENDING("pending"),
        HELD("held"),
        IN_PROGRESS("inProgress"),
        CANCELLED("cancelled"),
        COMPLETED("completed"),
        FAILED("failed"),
        PARTIAL("partial"),
        ASSESSING_CANCELLATION("assessingCancellation"),
        PENDING_CANCELLATION("pendingCancellation");

        private String val;
        private ResourceOrderState(String val) {
            this.val = val;
        }

        // fromvalue
        public static ResourceOrderState fromValue(String value) {
            for (ResourceOrderState b : ResourceOrderState.values()) {
                if (b.val.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public String getValue() {
            return val;
        }

        @Override
        public String toString() {
            return String.valueOf(val);
        }
    }
}
