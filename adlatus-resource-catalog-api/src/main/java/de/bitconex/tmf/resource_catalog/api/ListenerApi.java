/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.bitconex.tmf.resource_catalog.api;

import de.bitconex.tmf.resource_catalog.model.Error;
import de.bitconex.tmf.resource_catalog.model.EventSubscription;
import de.bitconex.tmf.resource_catalog.model.ExportJobCreateEvent;
import de.bitconex.tmf.resource_catalog.model.ExportJobStateChangeEvent;
import de.bitconex.tmf.resource_catalog.model.ImportJobCreateEvent;
import de.bitconex.tmf.resource_catalog.model.ImportJobStateChangeEvent;
import de.bitconex.tmf.resource_catalog.model.ResourceCandidateChangeEvent;
import de.bitconex.tmf.resource_catalog.model.ResourceCandidateCreateEvent;
import de.bitconex.tmf.resource_catalog.model.ResourceCandidateDeleteEvent;
import de.bitconex.tmf.resource_catalog.model.ResourceCatalogChangeEvent;
import de.bitconex.tmf.resource_catalog.model.ResourceCatalogCreateEvent;
import de.bitconex.tmf.resource_catalog.model.ResourceCatalogDeleteEvent;
import de.bitconex.tmf.resource_catalog.model.ResourceCategoryChangeEvent;
import de.bitconex.tmf.resource_catalog.model.ResourceCategoryCreateEvent;
import de.bitconex.tmf.resource_catalog.model.ResourceCategoryDeleteEvent;
import de.bitconex.tmf.resource_catalog.model.ResourceSpecificationChangeEvent;
import de.bitconex.tmf.resource_catalog.model.ResourceSpecificationCreateEvent;
import de.bitconex.tmf.resource_catalog.model.ResourceSpecificationDeleteEvent;
import de.bitconex.tmf.resource_catalog.utility.ApiUtil;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-07-27T10:29:48.460897800+02:00[Europe/Belgrade]")
@Validated
@Tag(name = "notification listeners (client side)", description = "the notification listeners (client side) API")
public interface ListenerApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /listener/exportJobCreateEvent : Client listener for entity ExportJobCreateEvent
     * Example of a client listener for receiving the notification ExportJobCreateEvent
     *
     * @param data The event data (required)
     * @return Notified (status code 201)
     * or Bad Request (status code 400)
     * or Unauthorized (status code 401)
     * or Forbidden (status code 403)
     * or Not Found (status code 404)
     * or Method Not allowed (status code 405)
     * or Conflict (status code 409)
     * or Internal Server Error (status code 500)
     */
    @Operation(
            operationId = "listenToExportJobCreateEvent",
            summary = "Client listener for entity ExportJobCreateEvent",
            description = "Example of a client listener for receiving the notification ExportJobCreateEvent",
            tags = {"notification listeners (client side)"},
            responses = {
                    @ApiResponse(responseCode = "201", description = "Notified", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = EventSubscription.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "405", description = "Method Not allowed", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "409", description = "Conflict", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/listener/exportJobCreateEvent",
            produces = {"application/json;charset=utf-8"},
            consumes = {"application/json;charset=utf-8"}
    )
    default ResponseEntity<EventSubscription> listenToExportJobCreateEvent(
            @Parameter(name = "data", description = "The event data", required = true) @Valid @RequestBody ExportJobCreateEvent data
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json;charset=utf-8"))) {
                    String exampleString = "{ \"query\" : \"query\", \"callback\" : \"callback\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json;charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /listener/exportJobStateChangeEvent : Client listener for entity ExportJobStateChangeEvent
     * Example of a client listener for receiving the notification ExportJobStateChangeEvent
     *
     * @param data The event data (required)
     * @return Notified (status code 201)
     * or Bad Request (status code 400)
     * or Unauthorized (status code 401)
     * or Forbidden (status code 403)
     * or Not Found (status code 404)
     * or Method Not allowed (status code 405)
     * or Conflict (status code 409)
     * or Internal Server Error (status code 500)
     */
    @Operation(
            operationId = "listenToExportJobStateChangeEvent",
            summary = "Client listener for entity ExportJobStateChangeEvent",
            description = "Example of a client listener for receiving the notification ExportJobStateChangeEvent",
            tags = {"notification listeners (client side)"},
            responses = {
                    @ApiResponse(responseCode = "201", description = "Notified", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = EventSubscription.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "405", description = "Method Not allowed", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "409", description = "Conflict", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/listener/exportJobStateChangeEvent",
            produces = {"application/json;charset=utf-8"},
            consumes = {"application/json;charset=utf-8"}
    )
    default ResponseEntity<EventSubscription> listenToExportJobStateChangeEvent(
            @Parameter(name = "data", description = "The event data", required = true) @Valid @RequestBody ExportJobStateChangeEvent data
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json;charset=utf-8"))) {
                    String exampleString = "{ \"query\" : \"query\", \"callback\" : \"callback\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json;charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /listener/importJobCreateEvent : Client listener for entity ImportJobCreateEvent
     * Example of a client listener for receiving the notification ImportJobCreateEvent
     *
     * @param data The event data (required)
     * @return Notified (status code 201)
     * or Bad Request (status code 400)
     * or Unauthorized (status code 401)
     * or Forbidden (status code 403)
     * or Not Found (status code 404)
     * or Method Not allowed (status code 405)
     * or Conflict (status code 409)
     * or Internal Server Error (status code 500)
     */
    @Operation(
            operationId = "listenToImportJobCreateEvent",
            summary = "Client listener for entity ImportJobCreateEvent",
            description = "Example of a client listener for receiving the notification ImportJobCreateEvent",
            tags = {"notification listeners (client side)"},
            responses = {
                    @ApiResponse(responseCode = "201", description = "Notified", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = EventSubscription.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "405", description = "Method Not allowed", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "409", description = "Conflict", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/listener/importJobCreateEvent",
            produces = {"application/json;charset=utf-8"},
            consumes = {"application/json;charset=utf-8"}
    )
    default ResponseEntity<EventSubscription> listenToImportJobCreateEvent(
            @Parameter(name = "data", description = "The event data", required = true) @Valid @RequestBody ImportJobCreateEvent data
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json;charset=utf-8"))) {
                    String exampleString = "{ \"query\" : \"query\", \"callback\" : \"callback\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json;charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /listener/importJobStateChangeEvent : Client listener for entity ImportJobStateChangeEvent
     * Example of a client listener for receiving the notification ImportJobStateChangeEvent
     *
     * @param data The event data (required)
     * @return Notified (status code 201)
     * or Bad Request (status code 400)
     * or Unauthorized (status code 401)
     * or Forbidden (status code 403)
     * or Not Found (status code 404)
     * or Method Not allowed (status code 405)
     * or Conflict (status code 409)
     * or Internal Server Error (status code 500)
     */
    @Operation(
            operationId = "listenToImportJobStateChangeEvent",
            summary = "Client listener for entity ImportJobStateChangeEvent",
            description = "Example of a client listener for receiving the notification ImportJobStateChangeEvent",
            tags = {"notification listeners (client side)"},
            responses = {
                    @ApiResponse(responseCode = "201", description = "Notified", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = EventSubscription.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "405", description = "Method Not allowed", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "409", description = "Conflict", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/listener/importJobStateChangeEvent",
            produces = {"application/json;charset=utf-8"},
            consumes = {"application/json;charset=utf-8"}
    )
    default ResponseEntity<EventSubscription> listenToImportJobStateChangeEvent(
            @Parameter(name = "data", description = "The event data", required = true) @Valid @RequestBody ImportJobStateChangeEvent data
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json;charset=utf-8"))) {
                    String exampleString = "{ \"query\" : \"query\", \"callback\" : \"callback\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json;charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /listener/resourceCandidateChangeEvent : Client listener for entity ResourceCandidateChangeEvent
     * Example of a client listener for receiving the notification ResourceCandidateChangeEvent
     *
     * @param data The event data (required)
     * @return Notified (status code 201)
     * or Bad Request (status code 400)
     * or Unauthorized (status code 401)
     * or Forbidden (status code 403)
     * or Not Found (status code 404)
     * or Method Not allowed (status code 405)
     * or Conflict (status code 409)
     * or Internal Server Error (status code 500)
     */
    @Operation(
            operationId = "listenToResourceCandidateChangeEvent",
            summary = "Client listener for entity ResourceCandidateChangeEvent",
            description = "Example of a client listener for receiving the notification ResourceCandidateChangeEvent",
            tags = {"notification listeners (client side)"},
            responses = {
                    @ApiResponse(responseCode = "201", description = "Notified", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = EventSubscription.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "405", description = "Method Not allowed", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "409", description = "Conflict", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/listener/resourceCandidateChangeEvent",
            produces = {"application/json;charset=utf-8"},
            consumes = {"application/json;charset=utf-8"}
    )
    default ResponseEntity<EventSubscription> listenToResourceCandidateChangeEvent(
            @Parameter(name = "data", description = "The event data", required = true) @Valid @RequestBody ResourceCandidateChangeEvent data
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json;charset=utf-8"))) {
                    String exampleString = "{ \"query\" : \"query\", \"callback\" : \"callback\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json;charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /listener/resourceCandidateCreateEvent : Client listener for entity ResourceCandidateCreateEvent
     * Example of a client listener for receiving the notification ResourceCandidateCreateEvent
     *
     * @param data The event data (required)
     * @return Notified (status code 201)
     * or Bad Request (status code 400)
     * or Unauthorized (status code 401)
     * or Forbidden (status code 403)
     * or Not Found (status code 404)
     * or Method Not allowed (status code 405)
     * or Conflict (status code 409)
     * or Internal Server Error (status code 500)
     */
    @Operation(
            operationId = "listenToResourceCandidateCreateEvent",
            summary = "Client listener for entity ResourceCandidateCreateEvent",
            description = "Example of a client listener for receiving the notification ResourceCandidateCreateEvent",
            tags = {"notification listeners (client side)"},
            responses = {
                    @ApiResponse(responseCode = "201", description = "Notified", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = EventSubscription.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "405", description = "Method Not allowed", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "409", description = "Conflict", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/listener/resourceCandidateCreateEvent",
            produces = {"application/json;charset=utf-8"},
            consumes = {"application/json;charset=utf-8"}
    )
    default ResponseEntity<EventSubscription> listenToResourceCandidateCreateEvent(
            @Parameter(name = "data", description = "The event data", required = true) @Valid @RequestBody ResourceCandidateCreateEvent data
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json;charset=utf-8"))) {
                    String exampleString = "{ \"query\" : \"query\", \"callback\" : \"callback\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json;charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /listener/resourceCandidateDeleteEvent : Client listener for entity ResourceCandidateDeleteEvent
     * Example of a client listener for receiving the notification ResourceCandidateDeleteEvent
     *
     * @param data The event data (required)
     * @return Notified (status code 201)
     * or Bad Request (status code 400)
     * or Unauthorized (status code 401)
     * or Forbidden (status code 403)
     * or Not Found (status code 404)
     * or Method Not allowed (status code 405)
     * or Conflict (status code 409)
     * or Internal Server Error (status code 500)
     */
    @Operation(
            operationId = "listenToResourceCandidateDeleteEvent",
            summary = "Client listener for entity ResourceCandidateDeleteEvent",
            description = "Example of a client listener for receiving the notification ResourceCandidateDeleteEvent",
            tags = {"notification listeners (client side)"},
            responses = {
                    @ApiResponse(responseCode = "201", description = "Notified", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = EventSubscription.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "405", description = "Method Not allowed", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "409", description = "Conflict", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/listener/resourceCandidateDeleteEvent",
            produces = {"application/json;charset=utf-8"},
            consumes = {"application/json;charset=utf-8"}
    )
    default ResponseEntity<EventSubscription> listenToResourceCandidateDeleteEvent(
            @Parameter(name = "data", description = "The event data", required = true) @Valid @RequestBody ResourceCandidateDeleteEvent data
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json;charset=utf-8"))) {
                    String exampleString = "{ \"query\" : \"query\", \"callback\" : \"callback\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json;charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /listener/resourceCatalogChangeEvent : Client listener for entity ResourceCatalogChangeEvent
     * Example of a client listener for receiving the notification ResourceCatalogChangeEvent
     *
     * @param data The event data (required)
     * @return Notified (status code 201)
     * or Bad Request (status code 400)
     * or Unauthorized (status code 401)
     * or Forbidden (status code 403)
     * or Not Found (status code 404)
     * or Method Not allowed (status code 405)
     * or Conflict (status code 409)
     * or Internal Server Error (status code 500)
     */
    @Operation(
            operationId = "listenToResourceCatalogChangeEvent",
            summary = "Client listener for entity ResourceCatalogChangeEvent",
            description = "Example of a client listener for receiving the notification ResourceCatalogChangeEvent",
            tags = {"notification listeners (client side)"},
            responses = {
                    @ApiResponse(responseCode = "201", description = "Notified", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = EventSubscription.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "405", description = "Method Not allowed", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "409", description = "Conflict", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/listener/resourceCatalogChangeEvent",
            produces = {"application/json;charset=utf-8"},
            consumes = {"application/json;charset=utf-8"}
    )
    default ResponseEntity<EventSubscription> listenToResourceCatalogChangeEvent(
            @Parameter(name = "data", description = "The event data", required = true) @Valid @RequestBody ResourceCatalogChangeEvent data
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json;charset=utf-8"))) {
                    String exampleString = "{ \"query\" : \"query\", \"callback\" : \"callback\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json;charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /listener/resourceCatalogCreateEvent : Client listener for entity ResourceCatalogCreateEvent
     * Example of a client listener for receiving the notification ResourceCatalogCreateEvent
     *
     * @param data The event data (required)
     * @return Notified (status code 201)
     * or Bad Request (status code 400)
     * or Unauthorized (status code 401)
     * or Forbidden (status code 403)
     * or Not Found (status code 404)
     * or Method Not allowed (status code 405)
     * or Conflict (status code 409)
     * or Internal Server Error (status code 500)
     */
    @Operation(
            operationId = "listenToResourceCatalogCreateEvent",
            summary = "Client listener for entity ResourceCatalogCreateEvent",
            description = "Example of a client listener for receiving the notification ResourceCatalogCreateEvent",
            tags = {"notification listeners (client side)"},
            responses = {
                    @ApiResponse(responseCode = "201", description = "Notified", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = EventSubscription.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "405", description = "Method Not allowed", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "409", description = "Conflict", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/listener/resourceCatalogCreateEvent",
            produces = {"application/json;charset=utf-8"},
            consumes = {"application/json;charset=utf-8"}
    )
    default ResponseEntity<EventSubscription> listenToResourceCatalogCreateEvent(
            @Parameter(name = "data", description = "The event data", required = true) @Valid @RequestBody ResourceCatalogCreateEvent data
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json;charset=utf-8"))) {
                    String exampleString = "{ \"query\" : \"query\", \"callback\" : \"callback\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json;charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /listener/resourceCatalogDeleteEvent : Client listener for entity ResourceCatalogDeleteEvent
     * Example of a client listener for receiving the notification ResourceCatalogDeleteEvent
     *
     * @param data The event data (required)
     * @return Notified (status code 201)
     * or Bad Request (status code 400)
     * or Unauthorized (status code 401)
     * or Forbidden (status code 403)
     * or Not Found (status code 404)
     * or Method Not allowed (status code 405)
     * or Conflict (status code 409)
     * or Internal Server Error (status code 500)
     */
    @Operation(
            operationId = "listenToResourceCatalogDeleteEvent",
            summary = "Client listener for entity ResourceCatalogDeleteEvent",
            description = "Example of a client listener for receiving the notification ResourceCatalogDeleteEvent",
            tags = {"notification listeners (client side)"},
            responses = {
                    @ApiResponse(responseCode = "201", description = "Notified", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = EventSubscription.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "405", description = "Method Not allowed", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "409", description = "Conflict", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/listener/resourceCatalogDeleteEvent",
            produces = {"application/json;charset=utf-8"},
            consumes = {"application/json;charset=utf-8"}
    )
    default ResponseEntity<EventSubscription> listenToResourceCatalogDeleteEvent(
            @Parameter(name = "data", description = "The event data", required = true) @Valid @RequestBody ResourceCatalogDeleteEvent data
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json;charset=utf-8"))) {
                    String exampleString = "{ \"query\" : \"query\", \"callback\" : \"callback\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json;charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /listener/resourceCategoryChangeEvent : Client listener for entity ResourceCategoryChangeEvent
     * Example of a client listener for receiving the notification ResourceCategoryChangeEvent
     *
     * @param data The event data (required)
     * @return Notified (status code 201)
     * or Bad Request (status code 400)
     * or Unauthorized (status code 401)
     * or Forbidden (status code 403)
     * or Not Found (status code 404)
     * or Method Not allowed (status code 405)
     * or Conflict (status code 409)
     * or Internal Server Error (status code 500)
     */
    @Operation(
            operationId = "listenToResourceCategoryChangeEvent",
            summary = "Client listener for entity ResourceCategoryChangeEvent",
            description = "Example of a client listener for receiving the notification ResourceCategoryChangeEvent",
            tags = {"notification listeners (client side)"},
            responses = {
                    @ApiResponse(responseCode = "201", description = "Notified", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = EventSubscription.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "405", description = "Method Not allowed", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "409", description = "Conflict", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/listener/resourceCategoryChangeEvent",
            produces = {"application/json;charset=utf-8"},
            consumes = {"application/json;charset=utf-8"}
    )
    default ResponseEntity<EventSubscription> listenToResourceCategoryChangeEvent(
            @Parameter(name = "data", description = "The event data", required = true) @Valid @RequestBody ResourceCategoryChangeEvent data
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json;charset=utf-8"))) {
                    String exampleString = "{ \"query\" : \"query\", \"callback\" : \"callback\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json;charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /listener/resourceCategoryCreateEvent : Client listener for entity ResourceCategoryCreateEvent
     * Example of a client listener for receiving the notification ResourceCategoryCreateEvent
     *
     * @param data The event data (required)
     * @return Notified (status code 201)
     * or Bad Request (status code 400)
     * or Unauthorized (status code 401)
     * or Forbidden (status code 403)
     * or Not Found (status code 404)
     * or Method Not allowed (status code 405)
     * or Conflict (status code 409)
     * or Internal Server Error (status code 500)
     */
    @Operation(
            operationId = "listenToResourceCategoryCreateEvent",
            summary = "Client listener for entity ResourceCategoryCreateEvent",
            description = "Example of a client listener for receiving the notification ResourceCategoryCreateEvent",
            tags = {"notification listeners (client side)"},
            responses = {
                    @ApiResponse(responseCode = "201", description = "Notified", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = EventSubscription.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "405", description = "Method Not allowed", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "409", description = "Conflict", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/listener/resourceCategoryCreateEvent",
            produces = {"application/json;charset=utf-8"},
            consumes = {"application/json;charset=utf-8"}
    )
    default ResponseEntity<EventSubscription> listenToResourceCategoryCreateEvent(
            @Parameter(name = "data", description = "The event data", required = true) @Valid @RequestBody ResourceCategoryCreateEvent data
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json;charset=utf-8"))) {
                    String exampleString = "{ \"query\" : \"query\", \"callback\" : \"callback\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json;charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /listener/resourceCategoryDeleteEvent : Client listener for entity ResourceCategoryDeleteEvent
     * Example of a client listener for receiving the notification ResourceCategoryDeleteEvent
     *
     * @param data The event data (required)
     * @return Notified (status code 201)
     * or Bad Request (status code 400)
     * or Unauthorized (status code 401)
     * or Forbidden (status code 403)
     * or Not Found (status code 404)
     * or Method Not allowed (status code 405)
     * or Conflict (status code 409)
     * or Internal Server Error (status code 500)
     */
    @Operation(
            operationId = "listenToResourceCategoryDeleteEvent",
            summary = "Client listener for entity ResourceCategoryDeleteEvent",
            description = "Example of a client listener for receiving the notification ResourceCategoryDeleteEvent",
            tags = {"notification listeners (client side)"},
            responses = {
                    @ApiResponse(responseCode = "201", description = "Notified", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = EventSubscription.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "405", description = "Method Not allowed", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "409", description = "Conflict", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/listener/resourceCategoryDeleteEvent",
            produces = {"application/json;charset=utf-8"},
            consumes = {"application/json;charset=utf-8"}
    )
    default ResponseEntity<EventSubscription> listenToResourceCategoryDeleteEvent(
            @Parameter(name = "data", description = "The event data", required = true) @Valid @RequestBody ResourceCategoryDeleteEvent data
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json;charset=utf-8"))) {
                    String exampleString = "{ \"query\" : \"query\", \"callback\" : \"callback\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json;charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /listener/resourceSpecificationChangeEvent : Client listener for entity ResourceSpecificationChangeEvent
     * Example of a client listener for receiving the notification ResourceSpecificationChangeEvent
     *
     * @param data The event data (required)
     * @return Notified (status code 201)
     * or Bad Request (status code 400)
     * or Unauthorized (status code 401)
     * or Forbidden (status code 403)
     * or Not Found (status code 404)
     * or Method Not allowed (status code 405)
     * or Conflict (status code 409)
     * or Internal Server Error (status code 500)
     */
    @Operation(
            operationId = "listenToResourceSpecificationChangeEvent",
            summary = "Client listener for entity ResourceSpecificationChangeEvent",
            description = "Example of a client listener for receiving the notification ResourceSpecificationChangeEvent",
            tags = {"notification listeners (client side)"},
            responses = {
                    @ApiResponse(responseCode = "201", description = "Notified", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = EventSubscription.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "405", description = "Method Not allowed", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "409", description = "Conflict", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/listener/resourceSpecificationChangeEvent",
            produces = {"application/json;charset=utf-8"},
            consumes = {"application/json;charset=utf-8"}
    )
    default ResponseEntity<EventSubscription> listenToResourceSpecificationChangeEvent(
            @Parameter(name = "data", description = "The event data", required = true) @Valid @RequestBody ResourceSpecificationChangeEvent data
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json;charset=utf-8"))) {
                    String exampleString = "{ \"query\" : \"query\", \"callback\" : \"callback\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json;charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /listener/resourceSpecificationCreateEvent : Client listener for entity ResourceSpecificationCreateEvent
     * Example of a client listener for receiving the notification ResourceSpecificationCreateEvent
     *
     * @param data The event data (required)
     * @return Notified (status code 201)
     * or Bad Request (status code 400)
     * or Unauthorized (status code 401)
     * or Forbidden (status code 403)
     * or Not Found (status code 404)
     * or Method Not allowed (status code 405)
     * or Conflict (status code 409)
     * or Internal Server Error (status code 500)
     */
    @Operation(
            operationId = "listenToResourceSpecificationCreateEvent",
            summary = "Client listener for entity ResourceSpecificationCreateEvent",
            description = "Example of a client listener for receiving the notification ResourceSpecificationCreateEvent",
            tags = {"notification listeners (client side)"},
            responses = {
                    @ApiResponse(responseCode = "201", description = "Notified", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = EventSubscription.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "405", description = "Method Not allowed", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "409", description = "Conflict", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/listener/resourceSpecificationCreateEvent",
            produces = {"application/json;charset=utf-8"},
            consumes = {"application/json;charset=utf-8"}
    )
    default ResponseEntity<EventSubscription> listenToResourceSpecificationCreateEvent(
            @Parameter(name = "data", description = "The event data", required = true) @Valid @RequestBody ResourceSpecificationCreateEvent data
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json;charset=utf-8"))) {
                    String exampleString = "{ \"query\" : \"query\", \"callback\" : \"callback\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json;charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /listener/resourceSpecificationDeleteEvent : Client listener for entity ResourceSpecificationDeleteEvent
     * Example of a client listener for receiving the notification ResourceSpecificationDeleteEvent
     *
     * @param data The event data (required)
     * @return Notified (status code 201)
     * or Bad Request (status code 400)
     * or Unauthorized (status code 401)
     * or Forbidden (status code 403)
     * or Not Found (status code 404)
     * or Method Not allowed (status code 405)
     * or Conflict (status code 409)
     * or Internal Server Error (status code 500)
     */
    @Operation(
            operationId = "listenToResourceSpecificationDeleteEvent",
            summary = "Client listener for entity ResourceSpecificationDeleteEvent",
            description = "Example of a client listener for receiving the notification ResourceSpecificationDeleteEvent",
            tags = {"notification listeners (client side)"},
            responses = {
                    @ApiResponse(responseCode = "201", description = "Notified", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = EventSubscription.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "405", description = "Method Not allowed", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "409", description = "Conflict", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json;charset=utf-8", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/listener/resourceSpecificationDeleteEvent",
            produces = {"application/json;charset=utf-8"},
            consumes = {"application/json;charset=utf-8"}
    )
    default ResponseEntity<EventSubscription> listenToResourceSpecificationDeleteEvent(
            @Parameter(name = "data", description = "The event data", required = true) @Valid @RequestBody ResourceSpecificationDeleteEvent data
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json;charset=utf-8"))) {
                    String exampleString = "{ \"query\" : \"query\", \"callback\" : \"callback\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json;charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
