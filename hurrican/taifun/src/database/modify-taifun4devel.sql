-- ATTENTIION: File must not contain ; to close a statement instead each statement is closed by / in a separate line

-- set sequence to good value
DECLARE
  curval NUMBER;
  maxval NUMBER;
  inc NUMBER;
BEGIN
  EXECUTE IMMEDIATE 'ALTER SEQUENCE S_PERSON_0 INCREMENT BY 1';
  SELECT MAX(PERSON_NO) INTO maxval FROM PERSON;
  SELECT S_PERSON_0.NEXTVAL INTO curval FROM DUAL;
  inc := (maxval - curval);
  IF inc > 0 THEN
    EXECUTE IMMEDIATE 'ALTER SEQUENCE S_PERSON_0 INCREMENT BY ' || inc;
    SELECT S_PERSON_0.nextval into curval FROM DUAL;
    EXECUTE IMMEDIATE 'ALTER SEQUENCE S_PERSON_0 INCREMENT BY 1';
  END IF;
END;
/

-- Erstelle Testuser fuer Schulungen
DELETE FROM JET_ROLE2USER WHERE ROLE_ID='TAIFUN_SUPERUSER' AND USERNAME='TESTUSER'
/
DELETE FROM JET_USER WHERE USERNAME = 'TESTUSER'
/
DELETE FROM PERSON WHERE NAME='TestuserName' and FIRSTNAME='TestuserVorname'
/

-- using a fixed ID because we need to reference this person in BSI modify4devel script
INSERT INTO PERSON
   (PERSON_NO, IS_ACTIVE, IS_EMPLOYEE, GENDER, NAME, FIRSTNAME, COMPANY_ADDR_NO, LANGUAGE, NO_MAILING, EMAIL, ORG_NO, USERW, DATEW)
VALUES
   (987654321, '1', '1', 'M', 'TestuserName', 'TestuserVorname',
    588299, 'german', '0', 'testuser@m-net.de', 1, 'NACHBEARB', TO_DATE('01/01/2010 07:11:04', 'MM/DD/YYYY HH24:MI:SS'))
/

INSERT INTO JET_USER
   (USERNAME, NAME, FIRSTNAME, EMAIL, PHONE, PASSWORD, PWDHASH, PWDSALT, PERSON_NO)
VALUES
   ('TESTUSER', 'TestuserName', 'TestuserVorname', 'testuser@m-net.de', '123456789',
    'navitest135', '118C4AD71562A084CBD91A6214C3ECAE', 'qssp4egszkmd18i7s99yck290yv1vbrn', 987654321)
/

INSERT INTO JET_ROLE2USER (ROLE_ID, USERNAME) VALUES ('TAIFUN_SUPERUSER','TESTUSER')
/

-- Erstelle Adminuser fuer Testsysteme
DELETE FROM JET_ROLE2USER WHERE ROLE_ID='TAIFUN_ADMIN' AND USERNAME='TESTADMIN'
/
DELETE FROM JET_USER WHERE USERNAME = 'TESTADMIN'
/
DELETE FROM PERSON WHERE NAME='TestadminName' and FIRSTNAME='TestadminVorname'
/

INSERT INTO PERSON
   (PERSON_NO, IS_ACTIVE, IS_EMPLOYEE, GENDER, NAME, FIRSTNAME, COMPANY_ADDR_NO, LANGUAGE, NO_MAILING, EMAIL, ORG_NO, USERW, DATEW)
VALUES
   (S_PERSON_0.nextval, '1', '1',
    'M', 'TestadminName', 'TestadminVorname',
    588299, 'german', '0', 'testadmin@m-net.de', 1, 'NACHBEARB', TO_DATE('01/01/2010 07:11:04', 'MM/DD/YYYY HH24:MI:SS'))
/

INSERT INTO JET_USER
   (USERNAME, NAME, FIRSTNAME, EMAIL, PHONE, PASSWORD, PWDHASH, PWDSALT, PERSON_NO)
VALUES
   ('TESTADMIN', 'TestadminName', 'TestadminVorname', 'testadmin@m-net.de', '123456789',
    'naviadmin531', '2027AECBB12318429E2B733693773E4D', 'fqx37h7b65sd9ffg0o19xkw1gjghfwbw',
    (SELECT PERSON_NO FROM PERSON WHERE NAME='TestadminName' and FIRSTNAME='TestadminVorname'))
/

INSERT INTO JET_ROLE2USER (ROLE_ID, USERNAME) VALUES ('TAIFUN_ADMIN','TESTADMIN')
/

-- Enable Herzo Media Reseller
UPDATE CUSTOMER SET IS_ACTIVE = '1', LOCK_DATE = NULL WHERE CUST_NO = '500000020'
/

-- Disable SPAIN interface jobs
UPDATE JOB SET ENABLED = 0 WHERE JOB_NO IN (1202,1203,1204,1205,1210,1211,1212,1240)
/

-- Disable Komsa interface jobs
UPDATE JOB SET ENABLED = 0 WHERE JOB_NO IN (1213,1218,1216,1217,1214,1215)
/

-- Disable ICCS interface job
UPDATE JOB SET ENABLED = 0 WHERE JOB_NO IN (1206,1207,1208,1209,1265,1286,1349)
/

-- Disable IAC accounting job
UPDATE JOB SET ENABLED = 0 WHERE JOB_NO = 15
/


-- Job Trigger anpassen, damit sie nicht in die Downtime waehrend der Nacht fallen
-- Die Job Trigger fuer 0h - 5h werden auf 6h bis 8h verschoben
UPDATE JOB_TIMER_TRIGGER SET HOURS='6' where HOURS IN ('0','1')
/
UPDATE JOB_TIMER_TRIGGER SET HOURS='7' where HOURS IN ('2','3')
/
UPDATE JOB_TIMER_TRIGGER SET HOURS='8' where HOURS IN ('4','5')
/
-- Job Trigger zwischen 21h - 23h vorverlegen
UPDATE JOB_TIMER_TRIGGER SET HOURS='19' where HOURS IN ('21','22','23')
/
-- @operation enable job SAP export
UPDATE JOB_TIMER_TRIGGER SET HOST = '${server.taifun.host}' WHERE HOST='mnettaifun05'
/

-- Disable Fex Connection to other systems
update FEX_CONNECTION SET PASSWORD=''
/

-- Configure Accounting Jobs
-- CheckFileSequence fuer CDR-Accounting deaktivieren
update UTI_RESOURCE set RSC_VALUE=0 where RSC_NO in (5,6,7)
/

-- WebService(s) are configured in jet-resources.xml.
delete from UTI_RESOURCE where RSC_CLASS = 'WebService'
/

-- Configure Logging for Jobs
update JOB set LOG_OUTCOME='/var/taifun/log.jobs/${db.user.schema}.export_iccs_2_taifun.log' where JOB_NO=1307
/
update JOB set LOG_OUTCOME='/var/taifun/log.jobs/${db.user.schema}.a1_orders_generieren.log' where JOB_NO=1213
/
update JOB set LOG_OUTCOME='/var/taifun/log.jobs/${db.user.schema}.a2_orders_archivieren.log' where JOB_NO=1218
/


-- @operation deleting all job log records
TRUNCATE TABLE JOB_LOG_RECORD
/
-- @operation deleting all job run argument records
DELETE FROM JOB_RUN_ARGUMENT
/
-- @operation deleting all job run records
DELETE FROM JOB_RUN
/

-- Foreign key anlegen, da dies meist fehlschlï¿½gt
BEGIN
    EXECUTE IMMEDIATE ('ALTER TABLE JOB_RUN_ARGUMENT ' ||
                       'ADD CONSTRAINT FK_JOB_RUN_ARGUMENT_0 ' ||
                       'FOREIGN KEY (JOB_RUN_NO) ' ||
                       'REFERENCES JOB_RUN (JOB_RUN_NO) ' ||
                       'ON DELETE CASCADE ENABLE');
    EXCEPTION
     WHEN OTHERS THEN
        NULL;
END;
/

-- @operation modifying all job notifications
UPDATE JOB_NOTIFICATION SET E_MAIL='${developer.email}'
/

-- delete job notification that are not really interesting
DELETE FROM JOB_NOTIFICATION where OUTCOME='SUCCEEDED'
/

-- Job Notification fuer LDAP-Sync abschalten
delete from JOB_NOTIFICATION where JOB_NO=12
/

-- @operation deleting all dbu bulk keyfield records
DELETE FROM DBU_BULK_KEYFIELD
/
-- @operation deleting all dbu bulk table records
DELETE FROM DBU_BULK_TABLE
/

BEGIN
    EXECUTE IMMEDIATE ('DELETE FROM A_PRICE_SUM_BACKUP');
    EXECUTE IMMEDIATE ('DELETE FROM CA_PRICE_SUM_BACKUP');
    EXCEPTION
     WHEN OTHERS THEN
        NULL;
END;
/

-- @operation deleting all dbu bulk records
DELETE FROM DBU_BULK
/
-- @operation deleting all uti job step records
DELETE FROM UTI_JOB_STEP
/
-- @operation deleting all uti job flow records
DELETE FROM UTI_JOB_FLOW
/
-- @operation deleting all uti job records
DELETE FROM UTI_JOB
/
-- @operation check this: DELETE FROM UTI_RESOURCE;
-- @operation deleting all process records
DELETE FROM PROCESSES
/


-- set sequence to good value
DECLARE
  curval NUMBER;
  maxval NUMBER;
  inc NUMBER;
BEGIN
  EXECUTE IMMEDIATE 'ALTER SEQUENCE S_ICCS_JOURNAL_0 INCREMENT BY 1';
  SELECT MAX(ICCS_JOURNAL_NO) INTO maxval FROM ICCS_JOURNAL;
  SELECT S_ICCS_JOURNAL_0.NEXTVAL INTO curval FROM DUAL;
  inc := (maxval - curval);
  IF inc > 0 THEN
    EXECUTE IMMEDIATE 'ALTER SEQUENCE S_ICCS_JOURNAL_0 INCREMENT BY ' || inc;
    SELECT S_ICCS_JOURNAL_0.nextval into curval FROM DUAL;
    EXECUTE IMMEDIATE 'ALTER SEQUENCE S_ICCS_JOURNAL_0 INCREMENT BY 1';
  END IF;
END;
/



-- set sequences to good value
DECLARE
  curval NUMBER;
  maxval NUMBER;
  inc NUMBER;
BEGIN
  EXECUTE IMMEDIATE 'ALTER SEQUENCE S_WFE_TASK_0 INCREMENT BY 1';
  SELECT MAX(TASK_NO) INTO maxval FROM WFE_TASK;
  SELECT S_WFE_TASK_0.NEXTVAL INTO curval FROM DUAL;
  inc := (maxval - curval);
  IF inc > 0 THEN
    EXECUTE IMMEDIATE 'ALTER SEQUENCE S_WFE_TASK_0 INCREMENT BY ' || inc;
    SELECT S_WFE_TASK_0.nextval into curval FROM DUAL;
    EXECUTE IMMEDIATE 'ALTER SEQUENCE S_WFE_TASK_0 INCREMENT BY 1';
  END IF;
END;
/

DECLARE
  curval NUMBER;
  maxval NUMBER;
  inc NUMBER;
BEGIN
  EXECUTE IMMEDIATE 'ALTER SEQUENCE S_AUFTRAG_0 INCREMENT BY 1';
  SELECT MAX(AUFTRAG_NO)+10000 INTO maxval FROM AUFTRAG;
  SELECT S_AUFTRAG_0.NEXTVAL INTO curval FROM DUAL;
  inc := (maxval - curval);
  IF inc > 0 THEN
    EXECUTE IMMEDIATE 'ALTER SEQUENCE S_AUFTRAG_0 INCREMENT BY ' || inc;
    SELECT S_AUFTRAG_0.nextval into curval FROM DUAL;
    EXECUTE IMMEDIATE 'ALTER SEQUENCE S_AUFTRAG_0 INCREMENT BY 1';
  END IF;
END;
/

DECLARE
  curval NUMBER;
  maxval NUMBER;
  inc NUMBER;
BEGIN
  EXECUTE IMMEDIATE 'ALTER SEQUENCE S_AUFTRAGPOS_0 INCREMENT BY 1';
  SELECT MAX(ITEM_NO) INTO maxval FROM AUFTRAGPOS;
  SELECT S_AUFTRAGPOS_0.NEXTVAL INTO curval FROM DUAL;
  inc := (maxval - curval);
  IF inc > 0 THEN
    EXECUTE IMMEDIATE 'ALTER SEQUENCE S_AUFTRAGPOS_0 INCREMENT BY ' || inc;
    SELECT S_AUFTRAGPOS_0.nextval into curval FROM DUAL;
    EXECUTE IMMEDIATE 'ALTER SEQUENCE S_AUFTRAGPOS_0 INCREMENT BY 1';
  END IF;
END;
/

DECLARE
  curval NUMBER;
  maxval NUMBER;
  inc NUMBER;
BEGIN
  EXECUTE IMMEDIATE 'ALTER SEQUENCE S_BILL_SPEC_0 INCREMENT BY 1';
  SELECT MAX(BILL_SPEC_NO) INTO maxval FROM BILL_SPEC;
  SELECT S_BILL_SPEC_0.NEXTVAL INTO curval FROM DUAL;
  inc := (maxval - curval);
  IF inc > 0 THEN
    EXECUTE IMMEDIATE 'ALTER SEQUENCE S_BILL_SPEC_0 INCREMENT BY ' || inc;
    SELECT S_BILL_SPEC_0.nextval into curval FROM DUAL;
    EXECUTE IMMEDIATE 'ALTER SEQUENCE S_BILL_SPEC_0 INCREMENT BY 1';
  END IF;
END;
/

DECLARE
  curval NUMBER;
  maxval NUMBER;
  inc NUMBER;
BEGIN
  EXECUTE IMMEDIATE 'ALTER SEQUENCE S_DN_0 INCREMENT BY 1';
  SELECT MAX(DN_NO) INTO maxval FROM DN;
  SELECT S_DN_0.NEXTVAL INTO curval FROM DUAL;
  inc := (maxval - curval);
  IF inc > 0 THEN
    EXECUTE IMMEDIATE 'ALTER SEQUENCE S_DN_0 INCREMENT BY ' || inc;
    SELECT S_DN_0.nextval into curval FROM DUAL;
    EXECUTE IMMEDIATE 'ALTER SEQUENCE S_DN_0 INCREMENT BY 1';
  END IF;
END;
/

DECLARE
  curval NUMBER;
  maxval NUMBER;
  inc NUMBER;
BEGIN
  EXECUTE IMMEDIATE 'ALTER SEQUENCE S_CUSTOMER_0 INCREMENT BY 1';
  SELECT MAX(CUST_NO) INTO maxval FROM CUSTOMER;
  SELECT S_CUSTOMER_0.NEXTVAL INTO curval FROM DUAL;
  inc := (maxval - curval);
  IF inc > 0 THEN
    EXECUTE IMMEDIATE 'ALTER SEQUENCE S_CUSTOMER_0 INCREMENT BY ' || inc;
    SELECT S_CUSTOMER_0.nextval into curval FROM DUAL;
    EXECUTE IMMEDIATE 'ALTER SEQUENCE S_CUSTOMER_0 INCREMENT BY 1';
  END IF;
END;
/

DECLARE
  curval NUMBER;
  maxval NUMBER;
  inc NUMBER;
BEGIN
  EXECUTE IMMEDIATE 'ALTER SEQUENCE S_PURCHASE_ORDER_0 INCREMENT BY 1';
  SELECT MAX(PURCHASE_ORDER_NO) INTO maxval FROM PURCHASE_ORDER;
  SELECT S_PURCHASE_ORDER_0.NEXTVAL INTO curval FROM DUAL;
  inc := (maxval - curval);
  IF inc > 0 THEN
    EXECUTE IMMEDIATE 'ALTER SEQUENCE S_PURCHASE_ORDER_0 INCREMENT BY ' || inc;
    SELECT S_PURCHASE_ORDER_0.nextval into curval FROM DUAL;
    EXECUTE IMMEDIATE 'ALTER SEQUENCE S_PURCHASE_ORDER_0 INCREMENT BY 1';
  END IF;
END;
/

DECLARE
  curval NUMBER;
  maxval NUMBER;
  inc NUMBER;
BEGIN
  EXECUTE IMMEDIATE 'ALTER SEQUENCE S_ADDRESS_0 INCREMENT BY 1';
  SELECT MAX(ADDR_NO) INTO maxval FROM ADDRESS;
  SELECT S_ADDRESS_0.NEXTVAL INTO curval FROM DUAL;
  inc := (maxval - curval);
  IF inc > 0 THEN
    EXECUTE IMMEDIATE 'ALTER SEQUENCE S_ADDRESS_0 INCREMENT BY ' || inc;
    SELECT S_ADDRESS_0.nextval into curval FROM DUAL;
    EXECUTE IMMEDIATE 'ALTER SEQUENCE S_ADDRESS_0 INCREMENT BY 1';
  END IF;
END;
/


declare
    tbl_exists number := 0;
begin
 select count(*) into tbl_exists from all_tables where table_name = 'TA_DISTR_CHANNEL_IMP';
 if tbl_exists = 0 then
    execute immediate 'CREATE TABLE APPSERVICE_RW.TA_DISTR_CHANNEL_IMP
        (
          DST_ID                    NUMBER(10),
          DST_DISTR_CHANNEL_ID      VARCHAR2(20 BYTE)   NOT NULL,
          DST_VO_NUMMER             VARCHAR2(20 BYTE),
          DST_NIEDERLASSUNG         VARCHAR2(20 BYTE)   NOT NULL,
          DST_REGION                VARCHAR2(20 BYTE)   NOT NULL,
          DST_VETTRIEBSKANAL        VARCHAR2(20 BYTE)   NOT NULL,
          DST_DESCRIPTION           VARCHAR2(50 BYTE)   NOT NULL,
          DST_CUST_NO               NUMBER(10),
          DST_TS                    DATE                DEFAULT sysdate               NOT NULL,
          DST_VERTRIEBSKANAL_SHORT  VARCHAR2(20 BYTE)   NOT NULL,
          DST_VERTRIEBSKANAL_SORT   VARCHAR2(20 BYTE)   NOT NULL
        )';
 end if;
end;
/

CREATE OR REPLACE TRIGGER APPSERVICE_RW.TRG_TA_DISTR_CHANNEL_IMP
BEFORE INSERT OR UPDATE ON APPSERVICE_RW.TA_DISTR_CHANNEL_IMP
FOR EACH ROW
DECLARE
    iCounter TA_DISTR_CHANNEL_IMP.DST_ID%TYPE;
    cannot_change_counter EXCEPTION;
BEGIN
    IF INSERTING THEN
        IF :new.DST_ID is NULL THEN
            Select SEQ_TA_DISTR_CHANNEL_IMP.NEXTVAL INTO iCounter FROM Dual;
           :new.DST_ID := iCounter;
        END IF;
    END IF;

    IF UPDATING THEN
        IF NOT (:new.DST_ID = :old.DST_ID) THEN
            RAISE cannot_change_counter;
        END IF;
    END IF;
EXCEPTION
     WHEN cannot_change_counter THEN
         raise_application_error(-20000, 'Cannot Change Counter Value');
END;
/

CREATE OR REPLACE FORCE VIEW APPSERVICE_RW.V_TA_DISTR_CHANNEL_IMP
(
   DST_ID,
   DST_DISTR_CHANNEL_ID,
   DST_VO_NUMMER,
   DST_NIEDERLASSUNG,
   DST_VETTRIEBSKANAL,
   DST_VERTRIEBSKANAL_SHORT,
   DST_VERTRIEBSKANAL_SORT,
   DST_REGION,
   DST_DESCRIPTION,
   DST_CUST_NO,
   DST_TS
)
AS
   SELECT
         A.DST_ID,
          A.DST_DISTR_CHANNEL_ID,
          A.DST_VO_NUMMER,
          A.DST_NIEDERLASSUNG,
          A.DST_VETTRIEBSKANAL,
          A.DST_VERTRIEBSKANAL_SHORT,
          A.DST_VERTRIEBSKANAL_SORT,
          A.DST_REGION,
          A.DST_DESCRIPTION,
          A.DST_CUST_NO,
          A.DST_TS
     FROM TA_DISTR_CHANNEL_IMP A
   UNION
   SELECT A.DST_ID,
          A.DST_DISTR_CHANNEL_ID,
          A.DST_VO_NUMMER,
          A.DST_NIEDERLASSUNG,
          A.DST_VETTRIEBSKANAL,
          A.DST_VERTRIEBSKANAL_SHORT,
          A.DST_VERTRIEBSKANAL_SORT,
          A.DST_REGION,
          A.DST_DESCRIPTION,
          A.DST_CUST_NO,
          A.DST_TS
     FROM V_TA_DISTR_CHANNEL2VP_NEW A
/

GRANT INSERT, UPDATE, SELECT on ACCOUNT TO R_ELEKTRA
/

GRANT INSERT, UPDATE, SELECT on ADDRESS TO R_ELEKTRA
/

GRANT INSERT, UPDATE, SELECT on AUFTRAG TO R_ELEKTRA
/

GRANT INSERT, UPDATE, SELECT on AUFTRAGPOS TO R_ELEKTRA
/

GRANT INSERT, UPDATE, SELECT on BILL_SPEC TO R_ELEKTRA
/

GRANT INSERT, UPDATE, SELECT on CUSTOMER TO R_ELEKTRA
/

GRANT INSERT, UPDATE, SELECT on CUST_ACCOUNT TO R_ELEKTRA
/

GRANT INSERT, UPDATE, SELECT on DETEME TO R_ELEKTRA
/

GRANT INSERT, UPDATE, SELECT on DN TO R_ELEKTRA
/

GRANT INSERT, UPDATE, SELECT on DN_BLOCK TO R_ELEKTRA
/

GRANT INSERT, UPDATE, SELECT on HIST_BILL_SPEC TO R_ELEKTRA
/

GRANT INSERT, UPDATE, SELECT on LEISTUNG TO R_ELEKTRA
/

GRANT INSERT, UPDATE, SELECT on OE TO R_ELEKTRA
/

GRANT INSERT, UPDATE, SELECT on PURCHASE_ORDER TO R_ELEKTRA
/

GRANT INSERT, UPDATE, SELECT on BLOCKADE to R_ELEKTRA
/

GRANT INSERT, UPDATE, SELECT on WEBGATE_PW to R_ELEKTRA
/

GRANT INSERT, UPDATE, SELECT on BLZ TO R_ELEKTRA
/

GRANT INSERT, UPDATE, SELECT on CHANGE_CUST_ACCOUNT TO R_ELEKTRA
/

GRANT INSERT, UPDATE, SELECT on DD_MANDATE TO R_ELEKTRA
/

GRANT INSERT, UPDATE, SELECT ON LEISTUNG_LANG TO R_ELEKTRA
/

GRANT INSERT, UPDATE, SELECT ON AUFTRAG__CONNECT TO R_ELEKTRA
/

GRANT INSERT, UPDATE, SELECT ON DEVICE TO R_ELEKTRA
/

GRANT INSERT, UPDATE, SELECT ON DEVICE__FSEC_LIC TO R_ELEKTRA
/

GRANT INSERT, UPDATE, SELECT ON AUFTRAG__BN_FC TO R_ELEKTRA
/

GRANT INSERT, UPDATE, SELECT ON PERSON TO R_ELEKTRA
/

GRANT INSERT, UPDATE, SELECT ON PERSON2CUSTOMER TO R_ELEKTRA
/

GRANT SELECT ON APPSERVICE_RW.V_TA_DISTR_CHANNEL_IMP TO R_ELEKTRA
/

GRANT INSERT, UPDATE, SELECT ON APPSERVICE_RW.TA_DISTR_CHANNEL_IMP TO R_ELEKTRA
/

GRANT INSERT, UPDATE, SELECT ON DEVICE__IPTV TO R_ELEKTRA
/

GRANT INSERT, UPDATE, SELECT ON IPTV_ACCOUNT TO R_ELEKTRA
/

GRANT INSERT, UPDATE, SELECT ON AUFTRAG__IPTV TO R_ELEKTRA
/

GRANT "CONNECT" TO "ELEKTRA"
/

grant R_ELEKTRA to ELEKTRA
/

grant R_MNET_READ_ONLY to ELEKTRA
/
