<?xml version="1.0" encoding="UTF-8"?>
<!--
Spring-Konfigurationsdatei fuer die DataSource- und Hibernate-Konfiguration
des CustomerCare-Bereichs von Hurrican.
Die Datei wird von CCServices.xml importiert!

-->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"
     default-lazy-init="true">

    <context:annotation-config />
    <tx:annotation-driven proxy-target-class="true" />

    <bean id="applicationContextProvider" class="de.augustakom.hurrican.service.ApplicationContextProvider" lazy-init="false" />

    <!-- Definition der Data-Source fuer die CC-Datenbank -->
    <bean id="cc.dataSourceTarget" class="de.augustakom.common.tools.dao.jdbc.AKBasicDataSource" destroy-method="close"
        autowire-candidate="false">
        <property name="driverClassName"><value>${hurrican.cc.jdbc.driver}</value></property>
        <property name="url"><value>${hurrican.cc.jdbc.url}</value></property>
        <property name="username"><value>${hurrican.cc.jdbc.user}</value></property>
        <property name="password"><value>${hurrican.cc.jdbc.password}</value></property>
        <property name="maxActive"><value>${hurrican.cc.jdbc.max.active}</value></property>
        <property name="maxIdle"><value>${hurrican.cc.jdbc.max.idle}</value></property>
        <property name="maxWait"><value>${db.pool.default.timeout}</value></property>
        <property name="validationQuery"><value>${db.pool.validation.query}</value></property>
        <property name="validationQueryTimeout"><value>${db.pool.validation.query.timeout}</value></property>
    </bean>
    <!-- Interceptor, um das Default-Schema der Datenbank-Connection zu setzen. -->
    <bean id="cc.setSchemaInterceptor" class="de.augustakom.common.tools.dao.SetDefaultSchemaInterceptor">
        <property name="schemaName"><value>${hurrican.cc.schema}</value></property>
    </bean>
    <bean id="cc.dataSource" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="proxyInterfaces"><value>javax.sql.DataSource</value></property>
        <property name="target"><ref bean="cc.dataSourceTarget"/></property>
        <property name="interceptorNames">
            <list>
                <value>cc.setSchemaInterceptor</value>
            </list>
        </property>
    </bean>

    <!-- Definition der Hibernate-SessionFactory fuer die CC-Datenbank -->
    <bean id="cc.sessionFactoryHibernateProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="properties">
            <props>
                <prop key="hibernate.dialect">${hurrican.cc.hibernate.dialect}</prop>
                <prop key="hibernate.bytecode.use_reflection_optimizer">true</prop>
                <prop key="hibernate.jdbc.use_scrollable_resultset">false</prop>
                <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
                <prop key="hibernate.cache.use_query_cache">true</prop>
                <prop key="hibernate.connection.release_mode">on_close</prop>
                <prop key="javax.persistence.validation.mode">auto</prop>
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.check_nullability">true</prop>
                <prop key="jadira.usertype.databaseZone">jvm</prop>
                <prop key="jadira.usertype.javaZone">jvm</prop>
                <!--
                    turn on schema generation:
                    This is useful when adding new JPA beans, so that you can view the generated SQL schema statements in system.out
                -->
                <!--
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                -->
            </props>
        </property>
    </bean>
    <bean id="cc.sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="mappingLocations">
            <list>
                <!-- es werden alle hbm.xml Files ab dem Package .../cc ermittelt -->
                <value>classpath*:de/augustakom/hurrican/model/cc/**/*.hbm.xml</value>
            </list>
        </property>
        <property name="packagesToScan">
            <list>
                <value>de.augustakom.hurrican.model.cc</value>
                <value>de.augustakom.hurrican.model.exceptions</value>
                <value>de.mnet.wita.model</value>
                <value>de.mnet.wita.message</value>
                <value>de.mnet.wita.message.auftrag</value>
                <value>de.mnet.wita.message.meldung</value>
                <value>de.mnet.wbci.model</value>
                <value>de.mnet.hurrican.wholesale.model</value>
            </list>
        </property>
        <property name="hibernateProperties" ref="cc.sessionFactoryHibernateProperties"/>
        <property name="dataSource" ref="cc.dataSource"/>
        <property name="entityInterceptor">
            <bean class="de.augustakom.hurrican.tools.hibernate.IPAddressInterceptor"/>
        </property>
    </bean>

    <!-- Transaction-Manager fuer die Hibernate-Session -->
    <bean id="cc.hibernateTxManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="cc.sessionFactory"/>
        <property name="nestedTransactionAllowed" value="true"/>
    </bean>

</beans>
