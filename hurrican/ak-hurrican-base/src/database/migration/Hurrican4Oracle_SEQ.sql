------------------------------------------------------------------
-- These are the SQL statements to create the sequences 
-- and insert triggers for the hurrican tables.
------------------------------------------------------------------

--
-- mit Hans klaeren, wie Trigger nur bei ID=NULL anspricht
--CREATE TRIGGER TR_SEQ_T_AUFTRAG BEFORE INSERT ON T_AUFTRAG
-- FOR EACH ROW  
--BEGIN
--  IF :new.ID = null THEN
--   SELECT SEQ_T_AUFTRAG.nextval INTO :new.ID FROM dual; 
--  END IF
--END;
--/
--


VARIABLE startval NUMBER;

BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_AK0800; EXECUTE
 IMMEDIATE 'CREATE SEQUENCE SEQ_T_AK0800 START WITH ' || :startval;
 END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_AK0800 BEFORE INSERT ON T_AK0800
 FOR EACH ROW  BEGIN  SELECT SEQ_T_AK0800.nextval INTO :new.ID
 FROM dual; END;
/
ALTER TABLE T_AK0800  MODIFY (TS DEFAULT CURRENT_TIMESTAMP);


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_AUFTRAG_DATEN;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_AUFTRAG_DATEN START
 WITH ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_AUFTRAG_DATEN BEFORE INSERT ON T_AUFTRAG_DATEN
 FOR EACH ROW  BEGIN  SELECT SEQ_T_AUFTRAG_DATEN.nextval INTO
 :new.ID FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_AUFTRAG_TECHNIK;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_AUFTRAG_TECHNIK START
 WITH ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_AUFTRAG_TECHNIK BEFORE INSERT ON T_AUFTRAG_TECHNIK
 FOR EACH ROW  BEGIN  SELECT SEQ_T_AUFTRAG_TECHNIK.nextval INTO
 :new.ID FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_AUFTRAG_FAKTURA;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_AUFTRAG_FAKTURA START
 WITH ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_AUFTRAG_FAKTURA BEFORE INSERT ON T_AUFTRAG_FAKTURA
 FOR EACH ROW  BEGIN  SELECT SEQ_T_AUFTRAG_FAKTURA.nextval INTO
 :new.ID FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_BA_VERL_AEND;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_BA_VERL_AEND START
 WITH ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_BA_VERL_AEND BEFORE INSERT ON T_BA_VERL_AEND
 FOR EACH ROW  BEGIN  SELECT SEQ_T_BA_VERL_AEND.nextval INTO
 :new.ID FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_BA_VERL_HIST;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_BA_VERL_HIST START
 WITH ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_BA_VERL_HIST BEFORE INSERT ON T_BA_VERL_HIST
 FOR EACH ROW  BEGIN  SELECT SEQ_T_BA_VERL_HIST.nextval INTO
 :new.ID FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_BA_VERL_NEU_ZUSATZ;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_BA_VERL_NEU_ZUS START
 WITH ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_BA_VERL_NEU_ZUS BEFORE INSERT ON T_BA_VERL_NEU_ZUSATZ
 FOR EACH ROW  BEGIN  SELECT SEQ_T_BA_VERL_NEU_ZUS.nextval INTO
 :new.ID FROM dual; END;
/

BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_BANKVERBINDUNG;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_BANKVERBINDUNG START
 WITH ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_BANKVERBINDUNG BEFORE INSERT ON T_BANKVERBINDUNG
 FOR EACH ROW  BEGIN  SELECT SEQ_T_BANKVERBINDUNG.nextval INTO
 :new.ID FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_BILLING_LEISTUNG_KONFIG;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_BILLING_LEISTUN START
 WITH ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_1_T_BILLING_LEISTUN BEFORE INSERT ON T_BILLING_LEISTUNG_KONFIG
 FOR EACH ROW  BEGIN  SELECT SEQ_T_BILLING_LEISTUN.nextval INTO
 :new.ID FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_CARRIER; EXECUTE
 IMMEDIATE 'CREATE SEQUENCE SEQ_T_CARRIER START WITH ' || :startval;
 END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_CARRIER BEFORE INSERT ON T_CARRIER
 FOR EACH ROW  BEGIN  SELECT SEQ_T_CARRIER.nextval INTO :new.ID
 FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_CARRIER_KENNUNG;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_CARRIER_KENNUNG START
 WITH ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_CARRIER_KENNUNG BEFORE INSERT ON T_CARRIER_KENNUNG
 FOR EACH ROW  BEGIN  SELECT SEQ_T_CARRIER_KENNUNG.nextval INTO
 :new.ID FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_CARRIER_LBZ;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_CARRIER_LBZ START WITH
 ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_CARRIER_LBZ BEFORE INSERT ON T_CARRIER_LBZ
 FOR EACH ROW  BEGIN  SELECT SEQ_T_CARRIER_LBZ.nextval INTO :new.ID
 FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_ACC_ART; EXECUTE
 IMMEDIATE 'CREATE SEQUENCE SEQ_T_ACC_ART START WITH ' || :startval;
 END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_ACC_ART BEFORE INSERT ON T_ACC_ART
 FOR EACH ROW  BEGIN  SELECT SEQ_T_ACC_ART.nextval INTO :new.ID
 FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_AUFTRAG; EXECUTE
 IMMEDIATE 'CREATE SEQUENCE SEQ_T_AUFTRAG START WITH ' || :startval;
 END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_AUFTRAG BEFORE INSERT ON T_AUFTRAG
 FOR EACH ROW  BEGIN  SELECT SEQ_T_AUFTRAG.nextval INTO :new.ID
 FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_AUFTRAG_IMPORT;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_AUFTRAG_IMPORT START
 WITH ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_AUFTRAG_IMPORT BEFORE INSERT ON T_AUFTRAG_IMPORT
 FOR EACH ROW  BEGIN  SELECT SEQ_T_AUFTRAG_IMPORT.nextval INTO
 :new.ID FROM dual; END;
/
ALTER TABLE T_AUFTRAG_IMPORT  MODIFY (LAST_MODIFIED DEFAULT CURRENT_TIMESTAMP);


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_AUFTRAG_IMPORT_FILES;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_AUFTRAG_IMPORT_ START
 WITH ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_AUFTRAG_IMPORT_ BEFORE INSERT ON T_AUFTRAG_IMPORT_FILES
 FOR EACH ROW  BEGIN  SELECT SEQ_T_AUFTRAG_IMPORT_.nextval INTO
 :new.ID FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_BA_VERL_NEU;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_BA_VERL_NEU START WITH
 ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_BA_VERL_NEU BEFORE INSERT ON T_BA_VERL_NEU
 FOR EACH ROW  BEGIN  SELECT SEQ_T_BA_VERL_NEU.nextval INTO :new.ID
 FROM dual; END;
/


BEGIN SELECT NVL (MAX( CB_ID), 0) +1 INTO :startval FROM T_CARRIERBESTELLUNG;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_CARRIERBESTELLU START
 WITH ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_CARRIERBESTELLU BEFORE INSERT ON T_CARRIERBESTELLUNG
 FOR EACH ROW  BEGIN  SELECT SEQ_T_CARRIERBESTELLU.nextval INTO
 :new.CB_ID FROM dual; END;
/
ALTER TABLE T_CARRIERBESTELLUNG  MODIFY (TIMESTAMP_ DEFAULT CURRENT_TIMESTAMP);


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_DIALER; EXECUTE
 IMMEDIATE 'CREATE SEQUENCE SEQ_T_DIALER START WITH ' || :startval;
 END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_DIALER BEFORE INSERT ON T_DIALER
 FOR EACH ROW  BEGIN  SELECT SEQ_T_DIALER.nextval INTO :new.ID
 FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_E_RECHNUNG_DRUCK;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_E_RECHNUNG_DRUCK START
 WITH ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_E_RECHNUNG_DRUCK BEFORE INSERT ON T_E_RECHNUNG_DRUCK
 FOR EACH ROW  BEGIN  SELECT SEQ_T_E_RECHNUNG_DRUCK.nextval INTO
 :new.ID FROM dual; END;
/
ALTER TABLE T_E_RECHNUNG_DRUCK  MODIFY (TIMESTAMP_ DEFAULT CURRENT_TIMESTAMP);


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_EG_HERKUNFT;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_EG_HERKUNFT START WITH
 ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_EG_HERKUNFT BEFORE INSERT ON T_EG_HERKUNFT
 FOR EACH ROW  BEGIN  SELECT SEQ_T_EG_HERKUNFT.nextval INTO :new.ID
 FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_AK0800_MODELL;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_AK0800_MODELL START
 WITH ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_AK0800_MODELL BEFORE INSERT ON T_AK0800_MODELL
 FOR EACH ROW  BEGIN  SELECT SEQ_T_AK0800_MODELL.nextval INTO
 :new.ID FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_AUFTRAG_TECHNIK_2_ENDSTELLE;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_AUFTRAG_TECHNIK START
 WITH ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_AUFTRAG_TECHNIK BEFORE INSERT ON T_AUFTRAG_TECHNIK_2_ENDSTELLE
 FOR EACH ROW  BEGIN  SELECT SEQ_T_AUFTRAG_TECHNIK.nextval INTO
 :new.ID FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_CB_2_ES; EXECUTE
 IMMEDIATE 'CREATE SEQUENCE SEQ_T_CB_2_ES START WITH ' || :startval;
 END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_CB_2_ES BEFORE INSERT ON T_CB_2_ES
 FOR EACH ROW  BEGIN  SELECT SEQ_T_CB_2_ES.nextval INTO :new.ID
 FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_DB_QUERIES;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_DB_QUERIES START WITH
 ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_DB_QUERIES BEFORE INSERT ON T_DB_QUERIES
 FOR EACH ROW  BEGIN  SELECT SEQ_T_DB_QUERIES.nextval INTO :new.ID
 FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_ENDSTELLE;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_ENDSTELLE START WITH
 ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_ENDSTELLE BEFORE INSERT ON T_ENDSTELLE
 FOR EACH ROW  BEGIN  SELECT SEQ_T_ENDSTELLE.nextval INTO :new.ID
 FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_EQ_DATEN;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_EQ_DATEN START WITH
 ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_EQ_DATEN BEFORE INSERT ON T_EQ_DATEN
 FOR EACH ROW  BEGIN  SELECT SEQ_T_EQ_DATEN.nextval INTO :new.ID
 FROM dual; END;
/


BEGIN SELECT NVL (MAX( EQ_ID), 0) +1 INTO :startval FROM T_EQUIPMENT;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_EQUIPMENT START WITH
 ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_EQUIPMENT BEFORE INSERT ON T_EQUIPMENT
 FOR EACH ROW  BEGIN  SELECT SEQ_T_EQUIPMENT.nextval INTO :new.EQ_ID
 FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_ES_ANSP; EXECUTE
 IMMEDIATE 'CREATE SEQUENCE SEQ_T_ES_ANSP START WITH ' || :startval;
 END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_ES_ANSP BEFORE INSERT ON T_ES_ANSP
 FOR EACH ROW  BEGIN  SELECT SEQ_T_ES_ANSP.nextval INTO :new.ID
 FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_ES_LTG_DATEN;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_ES_LTG_DATEN START
 WITH ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_ES_LTG_DATEN BEFORE INSERT ON T_ES_LTG_DATEN
 FOR EACH ROW  BEGIN  SELECT SEQ_T_ES_LTG_DATEN.nextval INTO
 :new.ID FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_FAKTURA; EXECUTE
 IMMEDIATE 'CREATE SEQUENCE SEQ_T_FAKTURA START WITH ' || :startval;
 END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_FAKTURA BEFORE INSERT ON T_FAKTURA
 FOR EACH ROW  BEGIN  SELECT SEQ_T_FAKTURA.nextval INTO :new.ID
 FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_FAKTURA_BEARBEITER;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_FAKTURA_BEARBEI START
 WITH ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_FAKTURA_BEARBEI BEFORE INSERT ON T_FAKTURA_BEARBEITER
 FOR EACH ROW  BEGIN  SELECT SEQ_T_FAKTURA_BEARBEI.nextval INTO
 :new.ID FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_FAKTURA_MONAT;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_FAKTURA_MONAT START
 WITH ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_FAKTURA_MONAT BEFORE INSERT ON T_FAKTURA_MONAT
 FOR EACH ROW  BEGIN  SELECT SEQ_T_FAKTURA_MONAT.nextval INTO
 :new.ID FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_FAKTURA_NO;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_FAKTURA_NO START WITH
 ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_FAKTURA_NO BEFORE INSERT ON T_FAKTURA_NO
 FOR EACH ROW  BEGIN  SELECT SEQ_T_FAKTURA_NO.nextval INTO :new.ID
 FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_FAKTURA_NR;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_FAKTURA_NR START WITH
 ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_FAKTURA_NR BEFORE INSERT ON T_FAKTURA_NR
 FOR EACH ROW  BEGIN  SELECT SEQ_T_FAKTURA_NR.nextval INTO :new.ID
 FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_GUI_MAPPING;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_GUI_MAPPING START WITH
 ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_GUI_MAPPING BEFORE INSERT ON T_GUI_MAPPING
 FOR EACH ROW  BEGIN  SELECT SEQ_T_GUI_MAPPING.nextval INTO :new.ID
 FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_HVT_BES_HIST;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_HVT_BES_HIST START
 WITH ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_HVT_BES_HIST BEFORE INSERT ON T_HVT_BES_HIST
 FOR EACH ROW  BEGIN  SELECT SEQ_T_HVT_BES_HIST.nextval INTO
 :new.ID FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_HVT_BESTELLUNG;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_HVT_BESTELLUNG START
 WITH ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_HVT_BESTELLUNG BEFORE INSERT ON T_HVT_BESTELLUNG
 FOR EACH ROW  BEGIN  SELECT SEQ_T_HVT_BESTELLUNG.nextval INTO
 :new.ID FROM dual; END;
/
ALTER TABLE T_HVT_BESTELLUNG  MODIFY (TIMEST DEFAULT CURRENT_TIMESTAMP);


BEGIN SELECT NVL (MAX( HVT_ID_STANDORT), 0) +1 INTO :startval FROM T_HVT_STANDORT;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_HVT_STANDORT START
 WITH ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_HVT_STANDORT BEFORE INSERT ON T_HVT_STANDORT
 FOR EACH ROW  BEGIN  SELECT SEQT_HVT_STANDORT.nextval INTO
 :new.HVT_ID_STANDORT FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_INHOUSE; EXECUTE
 IMMEDIATE 'CREATE SEQUENCE SEQ_T_INHOUSE START WITH ' || :startval;
 END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_INHOUSE BEFORE INSERT ON T_INHOUSE
 FOR EACH ROW  BEGIN  SELECT SEQ_T_INHOUSE.nextval INTO :new.ID
 FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_INT_ACCOUNT;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_INT_ACCOUNT START WITH
 ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_INT_ACCOUNT BEFORE INSERT ON T_INT_ACCOUNT
 FOR EACH ROW  BEGIN  SELECT SEQ_T_INT_ACCOUNT.nextval INTO :new.ID
 FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_INT_DRUCK;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_INT_DRUCK START WITH
 ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_INT_DRUCK BEFORE INSERT ON T_INT_DRUCK
 FOR EACH ROW  BEGIN  SELECT SEQ_T_INT_DRUCK.nextval INTO :new.ID
 FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_KUBENA; EXECUTE
 IMMEDIATE 'CREATE SEQUENCE SEQ_T_KUBENA START WITH ' || :startval;
 END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_KUBENA BEFORE INSERT ON T_KUBENA
 FOR EACH ROW  BEGIN  SELECT SEQ_T_KUBENA.nextval INTO :new.ID
 FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_KUBENA_HVT;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_KUBENA_HVT START WITH
 ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_KUBENA_HVT BEFORE INSERT ON T_KUBENA_HVT
 FOR EACH ROW  BEGIN  SELECT SEQ_T_KUBENA_HVT.nextval INTO :new.ID
 FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_KUBENA_PROD;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_KUBENA_PROD START WITH
 ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_KUBENA_PROD BEFORE INSERT ON T_KUBENA_PROD
 FOR EACH ROW  BEGIN  SELECT SEQ_T_KUBENA_PROD.nextval INTO :new.ID
 FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_KUBENA_TDN;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_KUBENA_TDN START WITH
 ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_KUBENA_TDN BEFORE INSERT ON T_KUBENA_TDN
 FOR EACH ROW  BEGIN  SELECT SEQ_T_KUBENA_TDN.nextval INTO :new.ID
 FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_LB_2_LEISTUNG;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_LB_2_LEISTUNG START
 WITH ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_LB_2_LEISTUNG BEFORE INSERT ON T_LB_2_LEISTUNG
 FOR EACH ROW  BEGIN  SELECT SEQ_T_LB_2_LEISTUNG.nextval INTO
 :new.ID FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_LEISTUNG_4_DN;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_LEISTUNG_4_DN START
 WITH ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_LEISTUNG_4_DN BEFORE INSERT ON T_LEISTUNG_4_DN
 FOR EACH ROW  BEGIN  SELECT SEQ_T_LEISTUNG_4_DN.nextval INTO
 :new.ID FROM dual; END;
/


BEGIN SELECT NVL (MAX( LFDNR), 0) +1 INTO :startval FROM T_LEISTUNG_DN;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_LEISTUNG_DN START WITH
 ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_LEISTUNG_DN BEFORE INSERT ON T_LEISTUNG_DN
 FOR EACH ROW  BEGIN  SELECT SEQ_T_LEISTUNG_DN.nextval INTO :new.LFDNR
 FROM dual; END;
/
ALTER TABLE T_LEISTUNG_DN  MODIFY (DATEW DEFAULT CURRENT_TIMESTAMP);


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_LEISTUNG_PARAMETER;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_LEISTUNG_PARAME START
 WITH ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_LEISTUNG_PARAME BEFORE INSERT ON T_LEISTUNG_PARAMETER
 FOR EACH ROW  BEGIN  SELECT SEQ_T_LEISTUNG_PARAME.nextval INTO
 :new.ID FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_LEISTUNG_SNAPSHOT;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_LEISTUNG_SNAPSH START
 WITH ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_LEISTUNG_SNAPSH BEFORE INSERT ON T_LEISTUNG_SNAPSHOT
 FOR EACH ROW  BEGIN  SELECT SEQ_T_LEISTUNG_SNAPSH.nextval INTO
 :new.ID FROM dual; END;
/
ALTER TABLE T_LEISTUNG_SNAPSHOT  MODIFY (TIMEST DEFAULT CURRENT_TIMESTAMP);


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_LEISTUNGSBUENDEL;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_LEISTUNGSBUENDEL START
 WITH ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_LEISTUNGSBUENDEL BEFORE INSERT ON T_LEISTUNGSBUENDEL
 FOR EACH ROW  BEGIN  SELECT SEQ_T_LEISTUNGSBUENDEL.nextval INTO
 :new.ID FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_LEITUNGSART;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_LEITUNGSART START WITH
 ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_LEITUNGSART BEFORE INSERT ON T_LEITUNGSART
 FOR EACH ROW  BEGIN  SELECT SEQ_T_LEITUNGSART.nextval INTO :new.ID
 FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_PHYSIKUEBERNAHME;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_PHYSIKUEBERNAHME START
 WITH ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_PHYSIKUEBERNAHME BEFORE INSERT ON T_PHYSIKUEBERNAHME
 FOR EACH ROW  BEGIN  SELECT SEQ_T_PHYSIKUEBERNAHME.nextval INTO
 :new.ID FROM dual; END;
/
ALTER TABLE T_PHYSIKUEBERNAHME  MODIFY (DATEW DEFAULT CURRENT_TIMESTAMP);


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_PROD_2_PROD;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_PROD_2_PROD START WITH
 ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_PROD_2_PROD BEFORE INSERT ON T_PROD_2_PROD
 FOR EACH ROW  BEGIN  SELECT SEQ_T_PROD_2_PROD.nextval INTO :new.ID
 FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_PROD_2_SL;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_PROD_2_SL START WITH
 ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_PROD_2_SL BEFORE INSERT ON T_PROD_2_SL
 FOR EACH ROW  BEGIN  SELECT SEQ_T_PROD_2_SL.nextval INTO :new.ID
 FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_PRODUKT_2_PHYSIKTYP;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_PRODUKT_2_PHYSI START
 WITH ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_PRODUKT_2_PHYSI BEFORE INSERT ON T_PRODUKT_2_PHYSIKTYP
 FOR EACH ROW  BEGIN  SELECT SEQ_T_PRODUKT_2_PHYSI.nextval INTO
 :new.ID FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_PVC_2_PROFIL;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_PVC_2_PROFIL START
 WITH ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_PVC_2_PROFIL BEFORE INSERT ON T_PVC_2_PROFIL
 FOR EACH ROW  BEGIN  SELECT SEQ_T_PVC_2_PROFIL.nextval INTO
 :new.ID FROM dual; END;
/


BEGIN SELECT NVL (MAX( RANGIER_ID), 0) +1 INTO :startval FROM T_RANGIERUNG;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_RANGIERUNG START WITH
 ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_RANGIERUNG BEFORE INSERT ON T_RANGIERUNG
 FOR EACH ROW  BEGIN  SELECT SEQ_T_RANGIERUNG.nextval INTO :new.RANGIER_ID
 FROM dual; END;
/
ALTER TABLE T_RANGIERUNG  MODIFY (TIMEST DEFAULT CURRENT_TIMESTAMP);


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_RANGIERUNGSMATRIX;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_RANGIERUNGSMATR START
 WITH ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_RANGIERUNGSMATR BEFORE INSERT ON T_RANGIERUNGSMATRIX
 FOR EACH ROW  BEGIN  SELECT SEQ_T_RANGIERUNGSMATR.nextval INTO
 :new.ID FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_RECHNUNGSANSCHRIFT;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_RECHNUNGSANSCHR START
 WITH ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_RECHNUNGSANSCHR BEFORE INSERT ON T_RECHNUNGSANSCHRIFT
 FOR EACH ROW  BEGIN  SELECT SEQ_T_RECHNUNGSANSCHR.nextval INTO
 :new.ID FROM dual; END;
/


BEGIN SELECT NVL (MAX( SDHP_ID), 0) +1 INTO :startval FROM T_SDH_PHYSIK;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_SDH_PHYSIK START WITH
 ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_SDH_PHYSIK BEFORE INSERT ON T_SDH_PHYSIK
 FOR EACH ROW  BEGIN  SELECT SEQ_T_SDH_PHYSIK.nextval INTO :new.SDHP_ID
 FROM dual; END;
/
ALTER TABLE T_SDH_PHYSIK  MODIFY (TIMEST DEFAULT CURRENT_TIMESTAMP);


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_SERVICE_CHAIN;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_SERVICE_CHAIN START
 WITH ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_SERVICE_CHAIN BEFORE INSERT ON T_SERVICE_CHAIN
 FOR EACH ROW  BEGIN  SELECT SEQ_T_SERVICE_CHAIN.nextval INTO
 :new.ID FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_SERVICECHAIN_2_COMMAND;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_SERVICECHAIN_2_ START
 WITH ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_SERVICECHAIN_2_ BEFORE INSERT ON T_SERVICECHAIN_2_COMMAND
 FOR EACH ROW  BEGIN  SELECT SEQ_T_SERVICECHAIN_2_.nextval INTO
 :new.ID FROM dual; END;
/


BEGIN SELECT NVL (MAX( S_ID), 0) +1 INTO :startval FROM T_SPERRE;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_SPERRE START WITH '
 || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_SPERRE BEFORE INSERT ON T_SPERRE
 FOR EACH ROW  BEGIN  SELECT SEQ_T_SPERRE.nextval INTO :new.S_ID
 FROM dual; END;
/
ALTER TABLE T_SPERRE  MODIFY (S_TIMEST DEFAULT CURRENT_TIMESTAMP);


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_SPERRE_INFO;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_SPERRE_INFO START WITH
 ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_SPERRE_INFO BEFORE INSERT ON T_SPERRE_INFO
 FOR EACH ROW  BEGIN  SELECT SEQ_T_SPERRE_INFO.nextval INTO :new.ID
 FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_SPERRKLASSEN;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ1_T_SPERRKLASSEN START
 WITH ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_SPERRKLASSEN BEFORE INSERT ON T_SPERRKLASSEN
 FOR EACH ROW  BEGIN  SELECT SEQ_T_SPERRKLASSEN.nextval INTO
 :new.ID FROM dual; END;
/


BEGIN SELECT NVL (MAX( SL_ID), 0) +1 INTO :startval FROM T_STRASSENLISTE;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_STRASSENLISTE START
 WITH ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_STRASSENLISTE BEFORE INSERT ON T_STRASSENLISTE
 FOR EACH ROW  BEGIN  SELECT SEQ_T_STRASSENLISTE.nextval INTO
 :new.SL_ID FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_TDN; EXECUTE
 IMMEDIATE 'CREATE SEQUENCE SEQ_T_TDN START WITH ' || :startval;
 END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_TDN BEFORE INSERT ON T_TDN FOR EACH
 ROW  BEGIN  SELECT SEQ_T_TDN.nextval INTO :new.ID FROM dual;
 END;
/


BEGIN SELECT NVL (MAX( UEVT_ID), 0) +1 INTO :startval FROM T_UEVT;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_UEVT START WITH ' ||
 :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_UEVT BEFORE INSERT ON T_UEVT FOR
 EACH ROW  BEGIN  SELECT SEQ_T_UEVT.nextval INTO :new.UEVT_ID
 FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_UEVT_2_ZIEL;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_UEVT_2_ZIEL START WITH
 ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_UEVT_2_ZIEL BEFORE INSERT ON T_UEVT_2_ZIEL
 FOR EACH ROW  BEGIN  SELECT SEQ_T_UEVT_2_ZIEL.nextval INTO :new.ID
 FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_VERLAUF; EXECUTE
 IMMEDIATE 'CREATE SEQUENCE SEQ_T_VERLAUF START WITH ' || :startval;
 END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_VERLAUF BEFORE INSERT ON T_VERLAUF
 FOR EACH ROW  BEGIN  SELECT SEQ_T_VERLAUF.nextval INTO :new.ID
 FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_VERLAUF_ABTEILUNG;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_VERLAUF_ABTEILU START
 WITH ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_VERLAUF_ABTEILU BEFORE INSERT ON T_VERLAUF_ABTEILUNG
 FOR EACH ROW  BEGIN  SELECT SEQ_T_VERLAUF_ABTEILU.nextval INTO
 :new.ID FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_VERLAUF_ACTIONS;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_VERLAUF_ACTIONS START
 WITH ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_VERLAUF_ACTIONS BEFORE INSERT ON T_VERLAUF_ACTIONS
 FOR EACH ROW  BEGIN  SELECT SEQ_T_VERLAUF_ACTIONS.nextval INTO
 :new.ID FROM dual; END;
/


BEGIN SELECT NVL (MAX( VPN_ID), 0) +1 INTO :startval FROM T_VPN; EXECUTE
 IMMEDIATE 'CREATE SEQUENCE SEQ_T_VPN START WITH ' || :startval;
 END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_VPN BEFORE INSERT ON T_VPN FOR EACH
 ROW  BEGIN  SELECT SEQ_T_VPN.nextval INTO :new.VPN_ID FROM dual;
 END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_VPN_KONF;
 EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_T_VPN_KONF START WITH
 ' || :startval; END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_VPN_KONF BEFORE INSERT ON T_VPN_KONF
 FOR EACH ROW  BEGIN  SELECT SEQ_T_VPN_KONF.nextval INTO :new.ID
 FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM T_ZUGANG; EXECUTE
 IMMEDIATE 'CREATE SEQUENCE SEQ_T_ZUGANG START WITH ' || :startval;
 END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_T_ZUGANG BEFORE INSERT ON T_ZUGANG
 FOR EACH ROW  BEGIN  SELECT SEQ_T_ZUGANG.nextval INTO :new.ID
 FROM dual; END;
/


BEGIN SELECT NVL (MAX( ID), 0) +1 INTO :startval FROM WISSEN; EXECUTE
 IMMEDIATE 'CREATE SEQUENCE SEQ_WISSEN START WITH ' || :startval;
 END; 
/
CREATE OR REPLACE TRIGGER TBI_SEQ_WISSEN BEFORE INSERT ON WISSEN FOR
 EACH ROW  BEGIN  SELECT SEQ_WISSEN.nextval INTO :new.ID FROM
 dual; END;
/
