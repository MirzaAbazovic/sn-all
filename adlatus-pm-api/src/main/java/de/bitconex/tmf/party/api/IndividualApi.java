/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.bitconex.tmf.party.api;

import com.fasterxml.jackson.databind.JsonNode;
import com.github.fge.jsonpatch.JsonPatchException;
import de.bitconex.tmf.party.models.Error;
import de.bitconex.tmf.party.models.Individual;
import de.bitconex.tmf.party.models.IndividualCreate;
import de.bitconex.tmf.party.models.IndividualUpdate;
import io.swagger.annotations.*;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;
import java.util.Map;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-07-13T12:28:10.456416600+02:00[Europe/Budapest]")
@Validated
@Api(value = "individual", description = "the individual API")
@RequestMapping(value = "/")
public interface IndividualApi {
    /**
     * POST /individual : Creates a Individual
     * This operation creates a Individual entity.
     *
     * @param individual The Individual to be created (required)
     * @return Created (status code 201)
     * or Bad Request (status code 400)
     * or Unauthorized (status code 401)
     * or Forbidden (status code 403)
     * or Method Not allowed (status code 405)
     * or Conflict (status code 409)
     * or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "Creates a Individual", nickname = "createIndividual", notes = "This operation creates a Individual entity.", response = Individual.class, tags = {"individual",})
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "Created", response = Individual.class),
            @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
            @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
            @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
            @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
            @ApiResponse(code = 409, message = "Conflict", response = Error.class),
            @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class)})
    @RequestMapping(
            method = RequestMethod.POST,
            value = "",
            produces = {"application/json;charset=utf-8"},
            consumes = {"application/json;charset=utf-8"}
    )
    ResponseEntity<Individual> createIndividual(@ApiParam(value = "The Individual to be created", required = true) @Valid @RequestBody IndividualCreate individual);


    /**
     * DELETE /individual/{id} : Deletes a Individual
     * This operation deletes a Individual entity.
     *
     * @param id Identifier of the Individual (required)
     * @return Deleted (status code 204)
     * or Bad Request (status code 400)
     * or Unauthorized (status code 401)
     * or Forbidden (status code 403)
     * or Not Found (status code 404)
     * or Method Not allowed (status code 405)
     * or Conflict (status code 409)
     * or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "Deletes a Individual", nickname = "deleteIndividual", notes = "This operation deletes a Individual entity.", tags = {"individual",})
    @ApiResponses(value = {
            @ApiResponse(code = 204, message = "Deleted"),
            @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
            @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
            @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
            @ApiResponse(code = 404, message = "Not Found", response = Error.class),
            @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
            @ApiResponse(code = 409, message = "Conflict", response = Error.class),
            @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class)})
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/{id}",
            produces = {"application/json;charset=utf-8"}
    )
    ResponseEntity<Void> deleteIndividual(@ApiParam(value = "Identifier of the Individual", required = true) @PathVariable("id") String id);


    /**
     * GET /individual : List or find Individual objects
     * This operation list or find Individual entities
     *
     * @param fields Comma-separated properties to be provided in response (optional)
     * @param offset Requested index for start of resources to be provided in response (optional)
     * @param limit  Requested number of resources to be provided in response (optional)
     * @return Success (status code 200)
     * or Bad Request (status code 400)
     * or Unauthorized (status code 401)
     * or Forbidden (status code 403)
     * or Not Found (status code 404)
     * or Method Not allowed (status code 405)
     * or Conflict (status code 409)
     * or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "List or find Individual objects", nickname = "listIndividual", notes = "This operation list or find Individual entities", response = Individual.class, responseContainer = "List", tags = {"individual",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Success", response = Individual.class, responseContainer = "List"),
            @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
            @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
            @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
            @ApiResponse(code = 404, message = "Not Found", response = Error.class),
            @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
            @ApiResponse(code = 409, message = "Conflict", response = Error.class),
            @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class)})
    @RequestMapping(
            method = RequestMethod.GET,
            value = "",
            produces = {"application/json;charset=utf-8"}
    )
    ResponseEntity<?> listIndividual(
            @RequestParam(required = false) String fields,
            @RequestParam(required = false) Integer offset,
            @RequestParam(required = false) Integer limit,
            @RequestParam(required = false) Map<String, String> allParams
    );


    /**
     * PATCH /individual/{id} : Updates partially a Individual
     * This operation updates partially a Individual entity.
     *
     * @param id         Identifier of the Individual (required)
     * @param individual The Individual to be updated (required)
     * @return Updated (status code 200)
     * or Bad Request (status code 400)
     * or Unauthorized (status code 401)
     * or Forbidden (status code 403)
     * or Not Found (status code 404)
     * or Method Not allowed (status code 405)
     * or Conflict (status code 409)
     * or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "Updates partially a Individual", nickname = "patchIndividual", notes = "This operation updates partially a Individual entity.", response = Individual.class, tags = {"individual",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Updated", response = Individual.class),
            @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
            @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
            @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
            @ApiResponse(code = 404, message = "Not Found", response = Error.class),
            @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
            @ApiResponse(code = 409, message = "Conflict", response = Error.class),
            @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class)})
    @RequestMapping(
            method = RequestMethod.PATCH,
            value = "/{id}",
            produces = {"application/json;charset=utf-8"},
            consumes = {"application/json;charset=utf-8"}
    )
    ResponseEntity<Individual> patchIndividual(@ApiParam(value = "Identifier of the Individual", required = true) @PathVariable("id") String id, @ApiParam(value = "The Individual to be updated", required = true) @Valid @RequestBody IndividualUpdate individual);


    @RequestMapping(
            method = RequestMethod.PATCH,
            value = "/{id}",
            produces = {"application/json;charset=utf-8"},
            consumes = {"application/json-patch+json"}
    )
    ResponseEntity<Individual> patchIndividual(@ApiParam(value = "Identifier of the Individual", required = true) @PathVariable("id") String id, @ApiParam(value = "The Individual to be updated", required = true) @RequestBody JsonNode operations) throws IOException, JsonPatchException;

    /**
     * GET /individual/{id} : Retrieves a Individual by ID
     * This operation retrieves a Individual entity. Attribute selection is enabled for all first level attributes.
     *
     * @param id     Identifier of the Individual (required)
     * @param fields Comma-separated properties to provide in response (optional)
     * @return Success (status code 200)
     * or Bad Request (status code 400)
     * or Unauthorized (status code 401)
     * or Forbidden (status code 403)
     * or Not Found (status code 404)
     * or Method Not allowed (status code 405)
     * or Conflict (status code 409)
     * or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "Retrieves a Individual by ID", nickname = "retrieveIndividual", notes = "This operation retrieves a Individual entity. Attribute selection is enabled for all first level attributes.", response = Individual.class, tags = {"individual",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Success", response = Individual.class),
            @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
            @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
            @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
            @ApiResponse(code = 404, message = "Not Found", response = Error.class),
            @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
            @ApiResponse(code = 409, message = "Conflict", response = Error.class),
            @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class)})
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/{id}",
            produces = {"application/json;charset=utf-8"}
    )
    ResponseEntity<Object> retrieveIndividual(@ApiParam(value = "Identifier of the Individual", required = true) @PathVariable("id") String id, @ApiParam(value = "Comma-separated properties to provide in response") @Valid @RequestParam(value = "fields", required = false) String fields);
}
