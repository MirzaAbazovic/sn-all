/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.33).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package de.bitconex.agreement.api;

import de.bitconex.agreement.model.AgreementSpecification;
import de.bitconex.agreement.model.AgreementSpecificationCreate;
import de.bitconex.agreement.model.AgreementSpecificationUpdate;
import de.bitconex.agreement.model.Error;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2023-10-02T13:11:01.216Z")

@Validated
@Api(value = "agreementSpecification", description = "the agreementSpecification API")
@RequestMapping(value = "/tmf-api/v4/agreementManagement")
public interface AgreementSpecificationApi {

    @ApiOperation(value = "Creates a AgreementSpecification", nickname = "createAgreementSpecification", notes = "This operation creates a AgreementSpecification entity.", response = AgreementSpecification.class, tags={ "agreementSpecification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = AgreementSpecification.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/agreementSpecification",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.POST)
    ResponseEntity<AgreementSpecification> createAgreementSpecification(@ApiParam(value = "The AgreementSpecification to be created" ,required=true )  @Valid @RequestBody AgreementSpecificationCreate agreementSpecification);


    @ApiOperation(value = "Deletes a AgreementSpecification", nickname = "deleteAgreementSpecification", notes = "This operation deletes a AgreementSpecification entity.", tags={ "agreementSpecification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Deleted"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/agreementSpecification/{id}",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteAgreementSpecification(@ApiParam(value = "Identifier of the AgreementSpecification",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "List or find AgreementSpecification objects", nickname = "listAgreementSpecification", notes = "This operation list or find AgreementSpecification entities", response = AgreementSpecification.class, responseContainer = "List", tags={ "agreementSpecification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = AgreementSpecification.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/agreementSpecification",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.GET)
    ResponseEntity<List<AgreementSpecification>> listAgreementSpecification(@ApiParam(value = "Comma-separated properties to be provided in response") @Valid @RequestParam(value = "fields", required = false) String fields,@ApiParam(value = "Requested index for start of resources to be provided in response") @Valid @RequestParam(value = "offset", required = false) Integer offset,@ApiParam(value = "Requested number of resources to be provided in response") @Valid @RequestParam(value = "limit", required = false) Integer limit);


    @ApiOperation(value = "Updates partially a AgreementSpecification", nickname = "patchAgreementSpecification", notes = "This operation updates partially a AgreementSpecification entity.", response = AgreementSpecification.class, tags={ "agreementSpecification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Updated", response = AgreementSpecification.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/agreementSpecification/{id}",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.PATCH)
    ResponseEntity<AgreementSpecification> patchAgreementSpecification(@ApiParam(value = "Identifier of the AgreementSpecification",required=true) @PathVariable("id") String id,@ApiParam(value = "The AgreementSpecification to be updated" ,required=true )  @Valid @RequestBody AgreementSpecificationUpdate agreementSpecification);


    @ApiOperation(value = "Retrieves a AgreementSpecification by ID", nickname = "retrieveAgreementSpecification", notes = "This operation retrieves a AgreementSpecification entity. Attribute selection is enabled for all first level attributes.", response = AgreementSpecification.class, tags={ "agreementSpecification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = AgreementSpecification.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/agreementSpecification/{id}",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.GET)
    ResponseEntity<AgreementSpecification> retrieveAgreementSpecification(@ApiParam(value = "Identifier of the AgreementSpecification",required=true) @PathVariable("id") String id,@ApiParam(value = "Comma-separated properties to provide in response") @Valid @RequestParam(value = "fields", required = false) String fields);

}
