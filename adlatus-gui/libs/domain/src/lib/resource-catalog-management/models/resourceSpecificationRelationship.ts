/**
 * Resource Catalog Management
 * ## TMF API Reference: TMF634 - Resource Catalog Management  ### Release : 19.0 - June 2019  Resource Catalog API is one of Catalog Management API Family. Resource Catalog API goal is to provide a catalog of resources.   ### Operations Resource Catalog API performs the following operations on the resources : - Retrieve an entity or a collection of entities depending on filter criteria - Partial update of an entity (including updating rules) - Create an entity (including default values and creation rules) - Delete an entity - Manage notification of events
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { ResourceSpecificationCharacteristic } from './resourceSpecificationCharacteristic';
import { TimePeriod } from './timePeriod';


/**
 * A migration, substitution, dependency or exclusivity relationship between/among resource specifications.
 */
export interface ResourceSpecificationRelationship { 
    /**
     * Unique identifier of target ResourceSpecification
     */
    id?: string;
    /**
     * Reference of the target ResourceSpecification
     */
    href?: string;
    /**
     * The default number of the related resource that should be instantiated, for example a rack would typically have 4 cards, although it could support more.
     */
    defaultQuantity?: number;
    /**
     * The maximum number of the related resource that should be instantiated, for example a rack supports a maximum of 16 cards
     */
    maximumQuantity?: number;
    /**
     * The minimum number of the related resource that should be instantiated, for example a rack must have at least 1 card
     */
    minimumQuantity?: number;
    /**
     * The name given to the target resource specification instance
     */
    name?: string;
    /**
     * Type of relationship such as migration, substitution, dependency, exclusivity
     */
    relationshipType?: string;
    /**
     * The association role for this resource specification
     */
    role?: string;
    /**
     * A characteristic that refines the relationship. For example, consider the relationship between a slot and a card. For a half-height card it is important to know the position at which the card is inserted, so a characteristic Position might be defined on the relationship to allow capturing of this in the inventory
     */
    characteristic?: Array<ResourceSpecificationCharacteristic>;
    /**
     * The period for which the ResourceSpecRelationship is valid
     */
    validFor?: TimePeriod;
    /**
     * When sub-classing, this defines the super-class
     */
    baseType?: string;
    /**
     * A URI to a JSON-Schema file that defines additional attributes and relationships
     */
    schemaLocation?: string;
    /**
     * When sub-classing, this defines the sub-class entity name
     */
    type?: string;
}
