/**
 * Resource Catalog Management
 * ## TMF API Reference: TMF634 - Resource Catalog Management  ### Release : 19.0 - June 2019  Resource Catalog API is one of Catalog Management API Family. Resource Catalog API goal is to provide a catalog of resources.   ### Operations Resource Catalog API performs the following operations on the resources : - Retrieve an entity or a collection of entities depending on filter criteria - Partial update of an entity (including updating rules) - Create an entity (including default values and creation rules) - Delete an entity - Manage notification of events
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AttachmentRefOrValue } from './attachmentRefOrValue';
import { FeatureSpecification } from './featureSpecification';
import { RelatedParty } from './relatedParty';
import { ResourceSpecificationCharacteristic } from './resourceSpecificationCharacteristic';
import { ResourceSpecificationRelationship } from './resourceSpecificationRelationship';
import { TargetResourceSchema } from './targetResourceSchema';
import { TimePeriod } from './timePeriod';


/**
 * Resources are physical or non-physical components (or some combination of these) within an enterprise's infrastructure or inventory. They are typically consumed or used by services (for example a physical port assigned to a service) or contribute to the realization of a Product (for example, a SIM card). They can be drawn from the Application, Computing and Network domains, and include, for example, Network Elements, software, IT systems, content and information, and technology components. A ResourceSpecification is an abstract base class for representing a generic means for implementing a particular type of Resource. In essence, a ResourceSpecification defines the common attributes and relationships of a set of related Resources, while Resource defines a specific instance that is based on a particular ResourceSpecification. Skipped properties: id,href
 */
export interface ResourceSpecificationUpdate { 
    /**
     * Category of the target resource like NetworkConnectivity, PhysicalLinks, Generic, L2Network and so on.
     */
    category?: string;
    /**
     * Description of this REST resource
     */
    description?: string;
    /**
     * A flag indicates that if this resource specification is a bundled specification (true) or single (false).
     */
    isBundle?: boolean;
    /**
     * Date and time of the last update of this REST resource
     */
    lastUpdate?: Date;
    /**
     * Used to indicate the current lifecycle status of the resource specification
     */
    lifecycleStatus?: string;
    /**
     * Name given to this REST resource
     */
    name?: string;
    /**
     * Resource Specification version
     */
    version?: string;
    /**
     * Complements the description of an element (for instance a resource) through video, pictures ...
     */
    attachment?: Array<AttachmentRefOrValue>;
    /**
     * A list of Features for this specification.
     */
    featureSpecification?: Array<FeatureSpecification>;
    /**
     * A related party defines party or party role linked to a specific entity.
     */
    relatedParty?: Array<RelatedParty>;
    /**
     * A characteristic quality or distinctive feature of a ResourceSpecification.  The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3). Certain characteristics, such as color, may be configured during the ordering or some other process.
     */
    resourceSpecCharacteristic?: Array<ResourceSpecificationCharacteristic>;
    /**
     * A migration, substitution, dependency or exclusivity relationship between/among resource specifications.
     */
    resourceSpecRelationship?: Array<ResourceSpecificationRelationship>;
    /**
     * A target resource schema reference. The reference object to the schema and type of target resource which is described by resource specification.
     */
    targetResourceSchema?: TargetResourceSchema;
    /**
     * The period for which this REST resource is valid
     */
    validFor?: TimePeriod;
    /**
     * When sub-classing, this defines the super-class
     */
    baseType?: string;
    /**
     * A URI to a JSON-Schema file that defines additional attributes and relationships
     */
    schemaLocation?: string;
    /**
     * When sub-classing, this defines the sub-class entity name
     */
    type?: string;
}
