/**
 * Resource Catalog Management
 * ## TMF API Reference: TMF634 - Resource Catalog Management  ### Release : 19.0 - June 2019  Resource Catalog API is one of Catalog Management API Family. Resource Catalog API goal is to provide a catalog of resources.   ### Operations Resource Catalog API performs the following operations on the resources : - Retrieve an entity or a collection of entities depending on filter criteria - Partial update of an entity (including updating rules) - Create an entity (including default values and creation rules) - Delete an entity - Manage notification of events
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { ResourceCategoryRef } from './resourceCategoryRef';
import { ResourceSpecificationRef } from './resourceSpecificationRef';
import { TimePeriod } from './timePeriod';


/**
 * ResourceCandidate is an entity that makes a resource specification available to a catalog. A ResourceCandidate and its associated resource specification may be published - made visible - in any number of resource catalogs, or in none. Skipped properties: id,href
 */
export interface ResourceCandidateUpdate { 
    /**
     * Description of this REST resource
     */
    description?: string;
    /**
     * Date and time of the last update of this REST resource
     */
    lastUpdate?: Date;
    /**
     * Used to indicate the current lifecycle status of the resource candidate.
     */
    lifecycleStatus?: string;
    /**
     * Name given to this REST resource
     */
    name?: string;
    /**
     * the version of resource candidate
     */
    version?: string;
    /**
     * The categories in which this candidate is exposed
     */
    category?: Array<ResourceCategoryRef>;
    /**
     * The detailed specification for this candidate
     */
    resourceSpecification?: ResourceSpecificationRef;
    /**
     * The period for which this REST resource is valid
     */
    validFor?: TimePeriod;
    /**
     * When sub-classing, this defines the super-class
     */
    baseType?: string;
    /**
     * A URI to a JSON-Schema file that defines additional attributes and relationships
     */
    schemaLocation?: string;
    /**
     * When sub-classing, this defines the sub-class entity name
     */
    type?: string;
}
